if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m001']=[{"name":"01-Java基础.md","path":"001-JAVA/01-Java基础.md","content":"# Java基础\n\n## 基本数据类型\n\nJava 中的几种基本数据类型有哪些？\n\n```\n6 种数字类型：\n  4 种整数型：byte、short、int、long\n  2 种浮点型：float、double\n1 种字符类型：char\n1 种布尔型：boolean。\n```\n\n包装类型\n\n```\n包装类型：Byte，Short，Integer，Long，Float，Double，Character，Boolean\n```\n\n基本类型 vs 包装类型\n\n```\n\n```\n\n## 变量\n\n### 字符型常量和字符串常量的区别?\n\n```\n（1）形式：字符型常量是单引号引起的一个字符；字符串常量是双引号引起的若干个字符\n（2）含义：字符常量相当于一个整型值（ASCII值），可以参加表达式运算；字符串常量代表一个地址值\n（3）内存：字符型常量只占2个字节；字符串常量占用若干字节\n```\n\n\n\n### 成员变量与局部变量的区别？\n\n```\n（1）作用域：\n\t\t- 成员变量：属于类的一部分，在整个类中都可以访问。可以被public、private、protected、static修饰\n\t\t- 局部变量：定在方法、构造函数和代码块内部，只能在其定义的范围内使用。没有修饰符\n（2）生命周期\n\t\t- 成员变量：随着对象的创建而创建，在对象销毁时销毁\n\t\t- 局部变量：在声明时被创建，并在其作用域结束后被销毁。\n（3）默认值：\n\t\t- 成员变量: 如果没有显式初始化，会被赋予默认值，如数值类型为0，布尔类型为false，引用类型为null。\n\t\t- 局部变量：没有默认值，必须在使用之前进行显式初始化。\n\n```\n\n### 静态变量？\n\n```\n（1）是什么\n静态变量就是被static关键值修饰的变量。它可以被类的所有实例共享，无论创建多个个对象，都共享同一份静态变量。也就是说，静态变量只会分配一次内存，可以节省内存。\n\n（2）访问方法\n\t\t- 通过类名直接访问。ClassName.staticVariable;\n\t\t- 通过对象引用访问。objectReference.staticVariable;\n```\n\n### 静态变量和实例变量的区别？\n\n```java\npublic class A {\n\n    private int x;         // 实例变量\n    private static int y;  // 静态变量\n\n    public static void main(String[] args) {\n        // int x = A.x;  // Non-static field \'x\' cannot be referenced from a static context\n        A a = new A();\n        int x = a.x;\n        int y = A.y;\n    }\n}\n\n（1）实例变量是属于实例的，与实例变量同生共死\n（2）访问方法不同\n```\n\n### 静态方法\n\n```\n使用static修饰的方法，静态方式也成类方法，是属于类的\n\n特点\n（1）无需实例化，通过类名调用\n（2）不能访问非静态成员\n（3）不能使用this关键值。静态方法中不能使用this关键字，因为this表示当前对象实例，而静态方法没有对象实例。\n（4）具有全局性：类的所有实例共享\n```\n\n### 静态代码块\n\n```java\nstatic {\n    // 静态代码块的代码逻辑\n}\n\n使用static修饰的一段代码块\n  \n特点\n（1）在类加载时执行，只执行一次\n（2）无需调用，自动执行\n（3）用于初始化静态成员\n（4）无法访问非静态变量\n```\n\n### 静态内部类\n\n```\n静态内部类是定义在另一个类中的内部类，被声明为静态的。\n\n特点：\n（1）可以直接访问外部类的静态方法和静态变量，无需创建外部类的对象。但不能直接访问外部类的非静态成员（包括实例变量和实例方法，需要通过创建外部类对象来访问）\n（2）可以在没有外部类对象的情况下被实力化和访问\n（3）生命周期独立于外部类，即使外部类被销毁，静态内部类仍然存在\n（4）静态内部类可以拥有静态成员和实例成员，包括静态变量、静态方法和实例变量、实例方法\n```\n\n```java\n// 静态内部类的声明方式如下：\npublic class OuterClass {\n    // 外部类的成员和方法\n    \n    public static class StaticInnerClass {\n        // 静态内部类的成员和方法\n    }\n}\n\n// 静态内部类可以通过以下方式实例化和访问：\nOuterClass.StaticInnerClass innerObject = new OuterClass.StaticInnerClass();\n// 访问静态内部类的成员和方法\ninnerObject.staticMethod();\ninnerObject.staticVariable;\n```\n\n### 静态内部类与非静态内部类的区别\n\n```\n（1）声明方式：有无static\n（2）实例化方式：静态内部类可以直接实例化；非静态内部类需要外部类的实例来创建\n（3）访问范围：\n\t\t- 静态内部类：只能访问外部类的静态成员，要访问非静态成员可以通过创建外部类的实例\n\t\t- 非静态内部类：可以直接访问外部类的静态与非静态成员\n（4）声明周期：\n\t\t- 静态内部类：独立于外部类，即使外部类被销毁，静态内部类的实例仍然存在\n\t\t- 非静态内部类：声明周期同外部类，共享一个实例\n```\n\n### 静态方法为什么不能调用非静态成员?\n\n```\n（1）静态方法是属于类的，在类加载时就会分配内存，可以通过类名直接访问；而非静态成员是属于实例对象的，只有在对象实例化之后才存在，需要通过类的实例对象去访问。\n（2）类中非静态成员不存在的时候，静态方法就已经存在了，此时调用内存中还不存在的非静态成员，属于非法操作\n```\n\n### 静态方法和实例方法有何不同？\n\n```\n（1）调用方式\n\t\t- 外部调用静态方法时，可以通过【类名.方法名】的方式，也可以通过【对象.方法名】的方式。\n\t\t- 实例方法只能通过【对象.方法名】\n（2）访问类成员是否存在限制\n\t\t- 静态方法只能反问类的静态成员（静态变量和静态方法），不允许访问实例成员\n```\n\n### 为什么静态变量不能在方法中定义\n\n```\n静态变量属于类的成员，生命周期与类相同，在类加载时就被初始化，类销毁时才会被销毁。\n定义在方法中的变量是局部变量，如果定义在方法中，那么只有方法被初始化，方法执行后就会销毁。\n```\n\n### 初始化顺序\n\n```\n静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。\n\n父类（静态变量、静态语句块）\n子类（静态变量、静态语句块）\n父类（实例变量、普通语句块）\n父类（构造函数）\n子类（实例变量、普通语句块）\n子类（构造函数）\n```\n\n\n\n### 重载和重写有什么区别？\n\n```\n（1）重载：同一个类中多个同名方法根据不同的参数执行不同的逻辑\n\n（2）重写：运行期间，子类对父类的相同方法的重新改造\n“两同两小一大”：\n- “两同”即方法名相同、形参列表相同；\n- “两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；\n- “一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。\n\n关于 重写的返回值类型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。\n\njavaguide\n```\n\n| 区别点     | 重载方法 | 重写方法                                                     |\n| :--------- | :------- | :----------------------------------------------------------- |\n| 发生范围   | 同一个类 | 子类                                                         |\n| 参数列表   | 必须修改 | 一定不能修改                                                 |\n| 返回类型   | 可修改   | 子类方法返回值类型应比父类方法返回值类型更小或相等           |\n| 异常       | 可修改   | 子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等； |\n| 访问修饰符 | 可修改   | 一定不能做更严格的限制（可以降低限制）                       |\n| 发生阶段   | 编译期   | 运行期                                                       |\n\n\n\n## Java集合\n\n### Java 集合概览\n\n```\nJava 集合， 也叫作容器，主要是由两大接口派生而来：\n1. 一个是 Collection接口，主要用于存放单一元素；\n\t- 下面又有三个主要的子接口：List、Set 和 Queue。\n2. 另一个是 Map 接口，主要用于存放键值对。\n\n```\n\n![Java 集合框架概览](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/07/02/11464016882696001688269600418RyFb8U-java-collection-hierarchy.png)\n\n### List, Set, Queue, Map 四者的区别？\n\n```\nList: 有序、可重复\nSet： 无需、不重复\nQueue: 有序可重复，先进先出\nMap: 使用键值对存储。key是无序、不重复； value：无序、可重复\n```\n\n### 为什么要使用集合？\n\n```\n数组的缺点：\n当我们需要存储一组类型相同的数据时，数组是最常用且最基本的容器之一。但是，使用数组存储对象存在一些不足之处，因为在实际开发中，存储的数据类型多种多样且数量不确定。\n\n集合的优点：\n与数组相比，Java 集合提供了更灵活、更有效的方法来存储多个数据对象。Java 集合框架中的各种集合类和接口可以存储不同类型和数量的对象，同时还具有多样化的操作方式。\n相较于数组，Java 集合的优势在于它们的大小可变、支持泛型、具有内建算法等。\n总的来说，Java 集合提高了数据的存储和处理灵活性，可以更好地适应现代软件开发中多样化的数据需求，并支持高质量的代码编写。\n```\n\n### List\n\n#### ArrayList 和 Array（数组）的区别？\n\n```\n（1）大小可变性：数组的长度在创建时就确定，并且不能改变。而 ArrayList 的大小是可以动态调整的，可以根据需要自动扩容或缩减。\n（2）对象类型：数组可以存储任何类型的对象，包括基本数据类型和引用类型。而 ArrayList 只能存储引用类型的对象，不能直接存储基本数据类型，需要使用对应的包装类型。\n（3）功能和灵活性：ArrayList 提供了丰富的方法和操作，可以方便地进行元素的插入、删除、查找等操作，以及获取列表的大小、遍历元素等。而数组的功能相对较少，需要手动实现这些操作。\n（4）性能：由于 ArrayList 内部使用数组实现，它在动态扩容和元素移动等操作时会引入一些性能开销。而数组在访问元素时更加高效，因为它们在内存中是连续存储的。\n（5）多维数据结构：数组可以轻松地表示多维数据结构，而 ArrayList 并不直接支持多维数据结构。\n\n综上所述，ArrayList 相对于数组具有更大的灵活性和功能，可以自动调整大小并提供方便的操作方法。但在性能要求较高、固定长度或多维数据结构等特定场景下，数组可能更适合使用。在选择使用 ArrayList 还是数组时，需要根据具体的需求和情况做出选择。·\n\nchatgpt\n```\n\n#### ArrayList和Array相比有很多优点，那为什么不都是用ArrayList，还要使用Array？\n\n```\n（1）性能：数组在访问元素时更加高效，因为它们在内存中是连续存储的。相比之下，ArrayList 内部使用数组实现，但它还需要进行动态扩容和元素移动等操作，可能会引入一些性能开销。\n（2）固定长度：如果数据集的大小是固定的，不会发生变化，那么使用数组是更合适的选择。数组的长度在创建时确定，之后不能改变，这可以提供更好的性能和内存利用率。\n（3）多维数组：数组可以轻松地表示多维数据结构，而 ArrayList 并不直接支持多维数据结构。在需要处理矩阵、图形、二维表等数据时，使用数组可以更自然地表示和操作。\n（4）直接访问索引：有时候我们需要直接访问数组的特定位置，而不需要进行插入、删除等操作。使用数组可以直接通过索引进行快速访问，而不需要进行额外的查找操作。\n\nArrayList 和数组都有各自的优势和适用场景。在大多数情况下，ArrayList 提供了更多的便利性和灵活性，可以自动调整大小，并提供了丰富的方法和操作。但对于一些特定的场景，如性能要求较高、固定长度或多维数据等，使用数组可能更为合适。\n\nchatgpt\n```\n\n#### ArrayList 可以添加 null 值吗？\n\n```\nArrayList 中可以存储任何类型的对象，包括 null 值。不过，不建议向ArrayList 中添加 null 值， null 值无意义，会让代码难以维护比如忘记做判空处理就会导致空指针异常\n\njavaguide\n```\n\n#### ArrayList 插入和删除元素的时间复杂度？\n\n```\n对于插入：\n- 头部插入：由于需要将所有元素都依次向后移动一个位置，因此时间复杂度是 O(n)。\n- 尾部插入：当 ArrayList 的容量未达到极限时，往列表末尾插入元素的时间复杂度是 O(1)，因为它只需要在数组末尾添加一个元素即可；当容量已达到极限并且需要扩容时，则需要执行一次 O(n) 的操作将原数组复制到新的更大的数组中，然后再执行 O(1) 的操作添加元素。\n- 指定位置插入：需要将目标位置之后的所有元素都向后移动一个位置，然后再把新元素放入指定位置。这个过程需要移动平均 n/2 个元素，因此时间复杂度为 O(n)。\n\n对于删除：\n- 头部删除：由于需要将所有元素依次向前移动一个位置，因此时间复杂度是 O(n)。\n- 尾部删除：当删除的元素位于列表末尾时，时间复杂度为 O(1)。\n- 指定位置删除：需要将目标元素之后的所有元素向前移动一个位置以填补被删除的空白位置，因此需要移动平均 n/2 个元素，时间复杂度为 O(n)。\n\njavaguide\n```\n\n#### LinkedList 插入和删除元素的时间复杂度？\n\n```\n- 头部插入/删除：只需要修改头结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。\n- 尾部插入/删除：只需要修改尾结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。\n- 指定位置插入/删除：需要先移动到指定位置，再修改指定节点的指针完成插入/删除，因此需要移动平均 n/2 个元素，时间复杂度为 O(n)。\n\njavaguide\n```\n\n#### LinkedList 为什么不能实现 RandomAccess 接口？\n\n```\nRandomAccess 是一个标记接口，用来表明实现该接口的类支持随机访问（即可以通过索引快速访问元素）。由于 LinkedList 底层数据结构是链表，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现 RandomAccess 接口。\n\njavaguide\n```\n\n#### ArrayList 与 LinkedList 区别?\n\n```\n（1）线程安全：都是不同步的，不保证线程安全\n（2）底层实现：\n\t- ArrayList使用Object数组实现，\n\t- LinkedList使用双向链表实现\n（3）插入和删除操作：\n\t- ArrayList 需要移动元素来保持连续存储的特性，因此对于大量的插入和删除操作，性能可能较低\n\t- LinkedList 的插入和删除操作只需要调整链表中的指针，因此对于频繁的插入和删除操作，性能可能更好\n（4）随即访问：\n\t- ArrayList支持\n\t- LinkedList不支持\n（5）内存占用：\n\t- ArrayList 在存储元素时需要预留一定的连续内存空间，因此它的内存占用比较高\n\t- LinkedList 的每个节点只需要存储元素值和指向前后节点的指针，因此内存占用相对较低\n\t\n如果需要频繁进行插入和删除操作，可以选择 LinkedList；如果需要频繁进行随机访问操作，可以选择 ArrayList。\n\nchatgpt\n```\n\n#### ArrayList 的扩容机制\n\n```java\n（1）初始容量：ArrayList 在创建时会分配一个初始容量，通常为 10（可以通过构造函数指定初始容量）。\n（2）扩容时机：向ArrayList添加元素时，如果当前元素个数超过了当前容量，ArrayList 将会进行扩容\n（3）扩容策略：ArrayList 扩容时会创建一个新的内部数组（当前容量的1.5倍），并将原来的元素复制到新数组中。\n\nArrayList扩容的本质就是计算出新的扩容数组的size后实例化，并将原有数组内容复制到新数组中去。默认情况下，新的容量会是原容量的1.5倍。\n\n以JDK1.8为例说明:\npublic boolean add(E e) {\n    //判断是否可以容纳e，若能，则直接添加在末尾；若不能，则进行扩容，然后再把e添加在末尾\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    //将e添加到数组末尾\n    elementData[size++] = e;\n    return true;\n    }\n\n// 每次在add()一个元素时，arraylist都需要对这个list的容量进行一个判断。通过ensureCapacityInternal()方法确保当前ArrayList维护的数组具有存储新元素的能力，经过处理之后将元素存储在数组elementData的尾部\nprivate void ensureCapacityInternal(int minCapacity) {\n      ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n        //如果传入的是个空数组则最小容量取默认容量与minCapacity之间的最大值\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            return Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n        return minCapacity;\n    }\n    \n  private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n        // 若ArrayList已有的存储能力满足最低存储要求，则返回add直接添加元素；如果最低要求的存储能力>ArrayList已有的存储能力，这就表示ArrayList的存储能力不足，因此需要调用 grow();方法进行扩容\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\n\nprivate void grow(int minCapacity) {\n        // 获取elementData数组的内存空间长度\n        int oldCapacity = elementData.length;\n        // 扩容至原来的1.5倍\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        //校验容量是否够\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        //若预设值大于默认的最大值，检查是否溢出\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // 调用Arrays.copyOf方法将elementData数组指向新的内存空间\n         //并将elementData的数据复制到新的内存空间\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\nchatgpt\n面试小抄：https://www.javalearn.cn/#/doc/Java集合/面试题?id=_5-说一说arraylist-的扩容机制？\n其他：javaguide: ArrayList 源码分析：https://javaguide.cn/java/collection/arraylist-source-code.html#arraylist-简介\n```\n\nArrayList 的构造函数\n\n```\n（1）默认构造函数，使用初始容量10构造一个空列表。\n\t\t实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为 10。\n（2）带初始容量参数的构造函数。\n（3）构造包含指定collection元素的列表\n```\n\n\n\n### Set\n\n<img src=\"https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/07/03/22325016883947701688394770256dipO8b-image-20230703223250082.png\" alt=\"image-20230703223250082\" style=\"zoom:50%;\" />\n\n#### 什么是Set？\n\n```\nSet 是 Java 中的一种集合（Collection）类型，Set 接口继承自 Collection 接口，它是一个不允许包含重复元素的集合。\n\n主要特点：\n（1）不可重复性。Set 中不能包含相同的元素，如果试图添加重复元素，则添加操作会失败。\n（2）无序性：Set 中的元素没有固定的顺序，即元素的顺序是不可预测的。\n（3）提供高效的查找操作：Set 提供了高效的查找操作，可以快速判断一个元素是否存在于 Set 中。\n\n常见实现类：\n（1）HashSet：基于哈希表实现，插入和查找操作的时间复杂度为 O(1)，不保证元素的顺序。\n（2）TreeSet：基于红黑树实现，插入和查找操作的时间复杂度为 O(logN)，元素按照自然排序或自定义排序进行排序。\n（3）LinkedHashSet：基于哈希表和链表实现，插入和查找操作的时间复杂度为 O(1)，元素按照插入顺序排序。\n\n常见用途：\n（1）去重：可以使用 Set 来去除集合中重复的元素，只保留不重复的元素。\n（2）判断元素是否存在：可以通过 Set 来快速判断一个元素是否存在于集合中。\n（3）数学集合运算：Set 支持集合的交集、并集、差集等运算，方便进行集合操作。\n\nchatgpt\n```\n\n#### 什么是HashSet？\n\n```\n（1）底层实现：基于哈希表（HashMap）实现，通过哈希函数将元素映射到桶中\n（2）无序性：不保证元素的插入顺序和存储顺序一致。\n（3）唯一性：每个元素都是唯一的。元素的唯一性是通过HashMap中键的唯一性来实现的，通过hashCode()和equals()方法来判断的。\n（4）允许空元素：HashSet可以存储空元素（null），但只能存储一个空元素，因为元素的唯一性要求。\n（5）性能高效：查找、插入和删除元素的时间复杂度是常数时间O(1)。\n\nchatgpt\n```\n\n#### HashSet是如何保证唯一性的？\n\n```\nHashSet通过HashMap来实现唯一性。\n\n当向HashSet中添加元素时，首先会计算元素的HashCode，找到对应的桶。\n然后遍历这个桶中的元素，比较它们的哈希code值，如果不想等则直接加入。\n如果哈希码相等，则用equals方法比较两个元素，如果返回true则表示重复元素，添加失败。否则添加成功\n```\n\n#### 什么是LinkedHashSet？\n\n```\n（1）底层实现：继承自HashSet，通过哈希表+双向链表实现。哈希表提供了快速的查找和删除操作，链表则用于维护元素的插入顺序。\n（2）有序性：可以保持元素的插入顺序和存储顺序一致\n（3）唯一性：每个元素都是唯一的。\n（4）允许空元素：与HashSet一样，LinkedHashSet可以存储空元素（null），但只能存储一个空元素。\n（5）性能：LinkedHashSet的性能与HashSet相当，查找、插入和删除操作的平均时间复杂度为常数时间O(1)。\n\nchatgpt\n```\n\n#### 什么是TreeSet?\n\n```\n（1）底层实现：TreeSet内部使用红黑树（Red-Black Tree）数据结构来存储元素。红黑树是一种自平衡的二叉查找树，可以保持元素的有序性，并提供高效的插入、删除和查找操作。\n（2）有序性：TreeSet会根据元素的比较规则对元素进行排序。如果元素实现了Comparable接口，将使用元素自身的比较逻辑来进行排序（对于整数类型的元素，默认的升序排序将会从小到大排列元素）；如果没有实现Comparable接口，可以在构造TreeSet时传入自定义的比较器来指定元素的排序规则。\n（3）唯一性：与Set接口一样，TreeSet不允许存储重复的元素，每个元素都是唯一的。\n（4）允许空元素：TreeSet可以存储空元素（null），但在比较元素时需要注意，因为空元素无法进行比较。\n（5）性能方面：TreeSet的插入、删除和查找操作的时间复杂度为O(log n)，其中n表示集合中的元素个数。由于红黑树的自平衡特性，TreeSet在大部分情况下具有良好的性能。\n\nTreeSet适用于需要元素有序并且需要高效的插入、删除和查找操作的场景。它常用于排序、范围查找等场景，也可以通过自定义比较器来指定特定的排序规则。\n\nchatgpt\n```\n\n#### TreeSet是如何保证有序性的？TODO\n\n```\n\n```\n\n\n\n#### 比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同\n\n```\nHashSet、LinkedHashSet和TreeSet都是Java集合框架中的Set接口的实现类\n\n（1）底层实现：HashSet和LinkedHashSet都是基于哈希表实现的，TreeSet是基于红黑树实现的\n（2）有序性：HashSet无序，LinkedHashSet保留了插入顺序，TreeSet根据元素的比较规则对元素进行排序，或者在构造TreeSet时自定义比较器。\n（3）唯一性：都保证了元素的唯一性\n（4）都允许空元素\n（5）性能：HashSet的插入和查找操作的性能较好，而TreeSet的有序性和范围查询是其特点，LinkedHashSet则在保持插入顺序的同时提供了较好的性能。\n\nchatgpt\n```\n\n#### TreeSet的两种方式\n\n元素实现Comparable接口\n\n```java\npublic class Person implements Comparable<Person> {\n    private String name;\n    private int age;\n\n    @Override\n    public int compareTo(Person other) {\n        // 比较逻辑，按照年龄进行比较\n        return this.age - other.age;\n    }\n}\n\n如果当前元素小于传入的元素，应返回负整数。\n如果当前元素等于传入的元素，应返回零。\n如果当前元素大于传入的元素，应返回正整数。\n  \nchatgpt\n```\n\n自定义比较器\n\n```java\npublic class PersonComparator implements Comparator<Person> {\n    @Override\n    public int compare(Person p1, Person p2) {\n        // 比较逻辑，按照年龄进行比较\n        return p1.getAge() - p2.getAge();\n    }\n}\n\n// 使用自定义比较器构造 TreeSet 对象\nTreeSet<Person> treeSet = new TreeSet<>(new PersonComparator());\n\nchatgpt\n```\n\n### Queue\n\n![image-20230704162733908](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/07/04/16273416884592541688459254135NeEAbK-image-20230704162733908.png)\n\n####  Queue 与 Deque 的区别\n\n```\nQueue 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 先进先出（FIFO）规则。\nQueue 扩展了 Collection 的接口，根据因为容量问题而导致操作失败后处理方式的不同 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。\n```\n\n| `Queue` 接口 | 抛出异常  | 返回特殊值          |\n| ------------ | --------- | ------------------- |\n| 插入队尾     | add(E e)  | offer(E e): boolean |\n| 删除队首     | remove()  | poll()：null        |\n| 查询队首元素 | element() | peek(): null        |\n\n```\nDeque 是双端队列，在队列的两端均可以插入或删除元素。\nDeque 扩展了 Queue 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：\n```\n\n| `Deque` 接口 | 抛出异常      | 返回特殊值      |\n| ------------ | ------------- | --------------- |\n| 插入队首     | addFirst(E e) | offerFirst(E e) |\n| 插入队尾     | addLast(E e)  | offerLast(E e)  |\n| 删除队首     | removeFirst() | pollFirst()     |\n| 删除队尾     | removeLast()  | pollLast()      |\n| 查询队首元素 | getFirst()    | peekFirst()     |\n| 查询队尾元素 | getLast()     | peekLast()      |\n\n#### ArrayDeque 与 LinkedList 的区别\n\n```\nArrayDeque 和 LinkedList 都是 Java 中常用的双端队列（Deque）的实现，它们在实现方式和性能上有一些区别。\n\n（1）内部实现方式\n\t\t- ArrayDeque：内部使用循环数组实现，可以自动扩容和缩容，具有较高的访问和操作性能\n\t\t- LinkedList：内部使用双向链表实现，每个节点包含前后节点的引用，支持快速插入和删除\n（2）访问和操作性能\n\t\t- ArrayDeque：头尾增删性能好O(1)。使用了循环数组，有较好的空间利用率\n\t\t- LinkedList：头尾增删性能好O(1)。随机访问和搜索差O(n)\n（3）内存占用\n\t\t- ArrayDeque 的内存占用比 LinkedList 少，因为它不需要为每个元素额外存储前后节点的引用。\n（4）适用场景\n\t\t- ArrayDeque：适用于头尾增删，随机访问性能要求高的\n\t\t- LinkedList：适用于任意位置增删，随机访问性能要求不高的\n\nchatgpt\n```\n\n#### 什么是PriorityQueue\n\n```\n是Java中优先级队列的实现，与 Queue 的区别在于元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。\n\n（1）底层实现：利用二叉堆的数据结构实现，底层使用可变长的数组来存储数据\n（2）有序性：不保证有序性，保证每次取出的元素是优先级最高的\n（3）唯一性：允许插入相同的元素，取出时优先级顺序不定\n（4）空元素：是非线程安全的，且不支持存储 NULL 和 non-comparable 的对象\n（5）性能：插入和删除操作的时间复杂度为 O(log n)，查找O(n)\n\nchatgpt\n```\n\n\n\n### Map\n\n![image-20230705204107476](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/07/05/20410716885608671688560867635aqltK5-image-20230705204107476.png)\n\n\n\n####  HashMap\n\n```\n是Java中的一种散列表实现，用于存储键值对数据，基于哈希表实现，可以快速增删查\n\n\n（1）底层实现：底层通过数组和链表（或红黑树）实现。每个键值对被封装为一个Entry对象，其中包含了键和值的信息。通过对键进行哈希计算，确定该键值对在内部数组中的存储位置。\n（2）有序性：不保证有序\n（3）唯一性：键是唯一的，不允许重复，键和值可以是任意类型的对象\n（4）空元素：允许存储null键和null值（除了Hashtable）\n（5）性能：通过键来进行快速的插入、删除和查找操作，时间复杂度为O(1)\n\nchatgpt\n```\n\n####  一般用什么作为HashMap的key?\n\n```\n一般用Integer、String 这种不可变类当 HashMap 当 key，而且 String 最为常用。\n\n（1）不可变：这些类是不可变的，一旦创建就不能被修改。这使得在哈希计算时保持稳定，不会发生改变。确保相同的内容始终具有相同的哈希值，保证hashmap键的唯一性\n（2）hashcode()和equals()的正确实现。所有类都继承至Object，提供了默认的hashcode()和equals(),但并不一定适用于所有类。而String类已经对这两个方法进行了正确的重写，从而保证了相同内容的字符串具有相同的哈希码。\n（3）高度优化的哈希函数：Java 的 String 类内部实现了高度优化的哈希函数，可以快速计算出字符串的哈希码。这有助于提高 HashMap 在处理 String 类型的键时的性能。\n```\n\n#### 用可变类当 HashMap 的 key 有什么问题?\n\n```\nhashcode 可能发生改变，导致 put 进去的值，无法 get 出。如下所示\n\nHashMap<List<String>, Object> changeMap = new HashMap<>();\nList<String> list = new ArrayList<>();\nlist.add(\"hello\");\nObject objectValue = new Object();\nchangeMap.put(list, objectValue);\nSystem.out.println(changeMap.get(list));\nlist.add(\"hello world\");//hashcode发生了改变\nSystem.out.println(changeMap.get(list));\n\n输出值如下：\njava.lang.Object@74a14482\nnull\n```\n\n#### [HashMap的底层数据结构是什么？](https://www.javalearn.cn/#/doc/Java集合/面试题?id=_7-hashmap的底层数据结构是什么？)\n\n```\n在 JDK 1.7 中，\nHashMap 使用了数组+链表的组合来实现。具体来说，它使用了一个 Entry 数组来存储键值对，每个数组元素是一个链表的头节点。当发生哈希冲突时，新的键值对会被添加到链表的末尾。这种实现方式称为\"拉链法\"（Chaining）。\n\n当链表过长，则会严重影响 HashMap 的性能，链表是糟糕的 O(n)\n在JDK1.8 中，进行了优化，引入了红黑树\n插入元素时\n- 当链表超过 8 且数据总量超过 64 时，hashmap会将链表转换为红黑树\n- 当红黑树的节点数量小于等于6时，红黑树会重新转换为链表。\t？？？\n这种优化能够更好地平衡存储空间和执行效率。\n\nchatgpt\n面试小抄\n```\n\n#### [解决hash冲突的办法有哪些？HashMap用的哪种？](https://www.javalearn.cn/#/doc/Java集合/面试题?id=_8-解决hash冲突的办法有哪些？hashmap用的哪种？)\n\n```\n解决Hash冲突方法有:开放定址法、再哈希法、链地址法（拉链法）、建立公共溢出区。HashMap中采用的是 链地址法 。\n\n（1）开放定址法：也称为再散列法，基本思想就是，如果p=H(key)出现冲突时，则以p为基础，再次hash，p1=H(p),如果p1再次出现冲突，则以p1为基础，以此类推，直到找到一个不冲突的哈希地址pi。 因此开放定址法所需要的hash表的长度要大于等于所需要存放的元素，而且因为存在再次hash，所以只能在删除的节点上做标记，而不能真正删除节点。\n（2）再哈希法(双重散列，多重散列)：提供多个不同的hash函数，当R1=H1(key1)发生冲突时，再计算R2=H2(key1)，直到没有冲突为止。 这样做虽然不易产生堆集，但增加了计算的时间。\n（3）链地址法(拉链法)，将哈希值相同的元素构成一个同义词的单链表,并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。\n（4）建立公共溢出区，将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。\n\n面试小抄\n```\n\n#### 为什么在解决 hash 冲突的时候，不直接用红黑树？而选择先用链表，再转红黑树?\n\n```\n（1）时间复杂度：链表的增删查是O(n)，红黑树是O(logn)。链表的复杂度相对较高，但是在链表较短的情况下，仍然可以保持较好的性能。\n\n（2）空间复杂度：链表节点只需要存储键值对的引用 & 下一个节点引用，相对来说占用空间较小。红黑树节点需要存储键值对的引用、左右节点的引用、以及额外的颜色标记，占用空间较大\n\nchatgpt\n```\n\n#### 如果不用红黑树，用二叉查找树可以么?\n\n```\n可以。但是二叉查找树在特殊情况下会变成一条线性结构（这就跟原来使用链表结构一样了，造成很深的问题），遍历查找会非常慢\n```\n\n#### 为什么阈值是8？\n\n```\n是因为泊松分布，作者在源码中的注释：\n\n理想情况下使用随机的哈希码，容器中节点分布在 hash 桶中的频率遵循泊松分布。链表中元素个数为 8 时的概率已经非常小\n```\n\n[参考](https://www.javalearn.cn/#/doc/Java集合/面试题?id=hashmap面试小抄)\n\n#### 为什么hashmap 查找的时间复杂度是O(1), 通过红黑树或者链表存储，是怎么找到元素的？需要遍历吗\n\n```\nTODO\n```\n\n#### hashmap的加载因子是什么？\n\n```\n加载因子（load factor）是指在哈希表中元素数量与桶（数组的每个元素）数量之间的比率关系\nhashmap的默认加载因子是0.75，当哈希表中的元素达到容量的75%时，会触发哈希表的扩容操作，将哈希表的容量增加一倍。\n\nchatgpt\n```\n\n#### hashmap的加载因子默认是多少？为什么是0.75，不是0.6或0.8?\n\n```\n数组长度是16，加载因子是0.75\n加载因子是一个权衡考虑的结果。\n（1）较低的加载因子会使得哈希表占用的空间更少，但会增加哈希冲突的概率，导致查找和插入操作的性能下降。\n（2）较高的加载因子会使得哈希表占用的空间更多 但会减少哈希冲突。\n0.75 被认为是一个较好的加载因子，它在时间和空间效率之间取得了一个平衡。\n\n使用场景\n低加载因子：内存多、时间效率高\n高加载因子：内存少、时间效率不高\n\nchatgpt\n```\n\n#### 为什么小加载因子会是哈希表占用空间更少，哈希冲突概率增加？\n\n```\n数组长度默认是16的条件下，在扩容之前\n（1）低加载因子：每个桶存的元素较少（因为超过一定数量就扩容了），因此占用的空间相对较小，但桶之间的空闲空间较多，会导致其他键映射到同一个桶中的可能性，增加哈希冲突的概率。\n（2）高加载因子：相比之下，较高的加载因子可以使每个桶中存储的元素较多，减少了空间浪费，同时也降低了多个键映射到同一个桶的可能性。桶中元素较多会增加查询时间\n\nchatgpt\n```\n\n#### [ HashMap 中 key 的存储索引是怎么计算的？](https://www.javalearn.cn/#/doc/Java集合/面试题?id=_11-hashmap-中-key-的存储索引是怎么计算的？)\n\n```\n在hashmap中，key的存储索引是通过哈希函数计算得到的。当插入一个键值对时，会根据key的哈希值进行计算，然后映射到数组的索引位置上。\n\n具体计算过程：\n（1）取key的hashcode值：使用 key 的 hashCode() 方法获取 key 的哈希码值，即一个整数\n（2）根据 hashcode 计算出hash值：使用 HashMap 的内部哈希函数将 hashCode 值转换为 hash 值。哈希函数的实现会对 hashCode 进行一系列的计算和变换操作，以生成一个更分散的 hash 值。\n（3）通过取模计算下标：使用取模运算将 hash 值映射到数组的索引位置。HashMap 内部维护了一个数组（通常称为 table 或 bucket），该数组的长度是固定的。通过 hash 值与数组长度进行取模运算，可以将 hash 值映射到数组的一个索引位置，从而确定 key 在数组中的存储位置。\n\nchatgpt\n```\n\n#### [HashMap 的put方法流程？](https://www.javalearn.cn/#/doc/Java集合/面试题?id=_12-hashmap-的put方法流程？)\n\n图转转红黑树前要判断数组长度是否>=64\n\n![在这里插入图片描述](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/07/06/17423116886365511688636551075KyBqgM-watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E5piOSGFua28=,size_20,color_FFFFFF,t_70,g_se,x_16.png)\n\n```\n（1）判断数组是否为空，为空就初始化\n（2）根据键的hashcode计算哈希值，计算出键值对在数组中的索引\n（3）位置不存在元素则直接插入, 判断是否扩容，直接返回null。\n（4）如果存在元素（发生冲突）\n\t\t- key存在，则覆盖，直接返回旧值\n\t\t- key不存在，则尾插法插入链表 / 红黑树\n（5）如果是链表,判断是否要转红黑树 还是 扩容\n（6）如果是红黑树，判断是否要扩容\n\nhttps://javaguide.cn/java/collection/hashmap-source-code.html#put-方法\nhttps://blog.csdn.net/citywu123/article/details/122125093\n```\n\n#### Jdk7 和Jdk8 的put方法区别是什么？\n\n```\n（1）解决哈希冲突时，jdk7只用链表，jdk8使用链表+红黑树，满足一定条件时，链表会转为红黑树\n（2）链表插入元素时，\n\t\t- jdk7使用头插法，多线程条件下，扩容会造成环形链或数据丢失，出现死循环\n\t\t- jdk8使用尾插法，扩容时会保持链表原本的顺序，就不会出现链表成环的问题，但多线程环境下，会出现数据覆盖的情况，导致数据不一致。\n\t\t\nhttps://xiaoniuhululu.com/2022-04-18_interview-about-hashmap/#%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A-%E4%BD%A0%E8%BF%98%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9Bhash%E7%AE%97%E6%B3%95%EF%BC%9F\n```\n\n#### 为什么会出现死循环\n\n```\nhttps://www.cnblogs.com/developer_chan/p/10450908.html\n```\n\n\n\n#### jdk8 中 HashMap 链表和红黑树的转化条件\n\n```\n插入元素后，链表的个数大于8，且长<于64时进行扩容\n如果>=64,则转为红黑树\n\n扩容完成后，如果某个节点是树，且节点个数<= 6则转换为链表？？？\n```\n\n\n\n#### HashMap 怎么设定初始容量大小的？\n\n```\n不传值默认为16，\n传入初始值n，则为大于n的2的最小次方\n如果传10，则大小为16\n```\n\n#### HashMap 的长度为什么是 2 的幂次方\n\n```\n（1）提高运算效率：当长度为 2 的幂次方时，通过取模运算可以使用位运算来替代，即 hash & (length - 1)，这比使用取模运算 hash % length 效率更高。\n（2）使数据均匀分布，减少碰撞：长度为 2 的幂次方可以保证哈希值在取模运算时能够更加均匀地分布到不同的桶中，减少哈希冲突的概率，提高 HashMap 的性能和效率。\n```\n\n#### 为什么“长度为 2 的幂次方可以保证哈希值在取模运算时能够更加均匀地分布到不同的桶中”？\n\n```\n2 的幂次方的二进制为 10000\nlength - 1的二进制为01111\n\n取模运算是hash & (length - 1)\n&运算：同1为1，其余为0\n\n当数组的长度为 2 的幂次方时，数组的长度减一的二进制表示形式中的所有位都是 1，这样就可以通过与操作（AND）来保留 hash 值的较低位，舍弃较高位。由于哈希函数的结果是一个较大的整数，而数组的长度相对较小，取模运算就可以将较大的整数映射到较小的范围内，使得哈希值能够均匀地分布到不同的桶中。\n```\n\n#### HashMap如何扩容？TODO\n\n```\nHashmap 在容量超过负载因子所定义的容量之后，就会扩容。扩容时会新建一个两倍大小的数组，将原来的对象放入新的数组中\n\n\nhttps://xiaoniuhululu.com/2022-04-18_interview-about-hashmap/#%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A-jdk8%E4%B8%AD%E7%9A%84%E6%89%A9%E5%AE%B9%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD%E6%9B%B4%E7%AE%80%E5%8D%95\n\nhttps://www.javalearn.cn/#/doc/Java集合/面试题?id=hashmap面试小抄\n```\n\n\n\n####  jdk8对HashMap的优化\n\n```\njdk7->jdk8的优化：\n\n（1）数组+链表改成了数组+链表+红黑树\n（2）链表的插入方式从头插法改成了尾插法\n（3）扩容的时候7需要对原数组中的元素进行重新hash定位在新数组的位置，8采用更简单的判断逻辑，位置不变或索引+旧容量大小；\n（4）在插入时，7先判断是否需要扩容，再插入；而 8先进行插入，插入完成再判断是否需要扩容；\n```\n\n[参考](https://xiaoniuhululu.com/2022-04-18_interview-about-hashmap/#%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A-jdk8%E4%B8%AD%E7%9A%84%E6%89%A9%E5%AE%B9%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD%E6%9B%B4%E7%AE%80%E5%8D%95)\n\n\n\n\n\n#### [HashMap为什么线程不安全？](https://www.javalearn.cn/#/doc/Java集合/面试题?id=_15-hashmap为什么线程不安全？)\n\n```\n（1）多线程下扩容死循环。jdk7中的hashmap使用头插法插入元素，在多线程下，扩容的时候可能导致环形链表，形成死循环。jdk8时改用尾插法，扩容时会保证链表原有顺序。\n（2）多线程put可能导致元素丢失。计算出来的索引位置可能一直，会造成前一个key会被后一个key覆盖，导致元素丢失。jdk7和jdk8都存在\n（3）put和get并发时，get可能为null。线程1执行put时，超出容量需要rehash，线程2此时get，就有可能出现问题。jdk7和jdk8都存在\n```\n\n[具体介绍](https://mp.weixin.qq.com/s?__biz=MzkyMTI3Mjc2MQ==&mid=2247485906&idx=1&sn=64785914b2bc6c53b21d7c62fbb605a7&source=41#wechat_redirect)\n\n\n\n### ConcurrentHashMap\n\n","timestamp":1691670417385},{"name":"00-并发编程相关.md","path":"001-JAVA/010-Java并发编程/00-并发编程相关.md","content":"[采用线程池进行异步任务处理](https://cloud.tencent.com/developer/article/1161221)\n\n[生产实践——线程池与异步任务编排](https://juejin.cn/post/7086351322944913438#heading-12)\n\n-   多文件上传\n\n[Java线程池实现原理及其在美团业务中的实践](https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html)\n\n[Javaguide 线程池详解](https://javaguide.cn/java/concurrent/java-thread-pool-summary.html)","timestamp":1691670417385},{"name":"01-Java并发编程基础.md","path":"001-JAVA/010-Java并发编程/01-Java并发编程基础.md","content":"# Java并发编程基础\n\n## 1 线程基础\n\n### 什么是线程\n\n### 为什么要使用多线程\n\n### 线程的优先级\n\n### 线程的状态\n\n* New：新创建的线程，尚未执行；\n* Runnable：运行中的线程，正在执行 `run()`方法的Java代码；\n* Blocked：运行中的线程，因为某些操作被阻塞而挂起；\n* Waiting：运行中的线程，因为某些操作在等待中；\n* Timed Waiting：运行中的线程，因为执行 `sleep()`方法正在计时等待；\n* Terminated：线程已终止，因为 `run()`方法执行完毕。\n\n![image-20230503132121863](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/05/04/13042416831766641683176664243erV4pC-13212216830912821683091282100jSyioP-image-20230503132121863-20230504130424144.png)\n\n### 线程终止的原因\n\n- 线程正常终止：`run()`方法执行到 `return`语句返回；\n- 线程意外终止：`run()`方法因为未捕获的异常导致线程终止；\n- 对某个线程的 `Thread`实例调用 `stop()`方法强制终止（强烈不推荐使用）。\n\n## 2 创建线程的方式\n\n```\n1.继承Tread类\n2.实现Runnable接口\n3.实现Callable接口\n4.使用线程池\n```\n\n### 继承Tread类\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread();\n        t.start(); // 启动新线程\n    }\n}\n```\n\n执行指定代码\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new MyThread();\n        t.start(); // 启动新线程\n    }\n}\n\nclass MyThread extends Thread {\n    @Override\n    public void run() {\n        System.out.println(\"start new thread!\");\n    }\n}\n```\n\n[参考](https://www.liaoxuefeng.com/wiki/1252599548343744/1306580710588449)\n\n### 实现Runnable接口\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(new MyRunnable());\n        t.start(); // 启动新线程\n    }\n}\n\nclass MyRunnable implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(\"start new thread!\");\n    }\n}\n```\n\n简写\n\n```java\nnew Thread(new Runnable() {\n  \t@Override\n  \tpublic void run() {\n    \t//调用卖票方法\n    \tfor (int i = 0; i < 40; i++) {\n      \tticket.sale();\n    \t}\n  \t}\n},\"Thread Name\").start();\n```\n\n使用Java8的lambda语法简写\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(() -> {\n            System.out.println(\"start new thread!\");\n        });\n        t.start(); // 启动新线程\n    }\n}\n```\n\n[参考](https://www.liaoxuefeng.com/wiki/1252599548343744/1306580710588449)\n\n## 3 中断线程\n\n\n\n## 4 线程间通信\n\n### volatile和synchronized关键字\n\n\n\n### 通知/等待机制\n\n#### 通知和等待的相关方法\n\n等待\n\n```\nwait(): 等待无限长的时间，直到其他线程唤醒它。\nwait(long timeout): 等待一定的时间后，自动唤醒当前线程。\nwait(long timeout, int nanos): 等待指定的时间和纳秒数后自动唤醒当前线程。\n```\n\n通知\n\n```\nnotify()方法用于唤醒一个正在等待的线程，如果有多个线程等待，则唤醒其中一个线程。\nnotifyAll()方法则唤醒所有等待的线程。\n```\n\n#### 等待/通知的经典范式\n\n等待方\n\n```java\n1.获取对象的锁\n2.如果条件不满足，则调用对象的wait()方法，被通知后仍要检查条件（即使用wile而不能使用if）\n3.条件满足时则执行对应的逻辑\n\nsynchronized(对象) {\n\twhile(条件不满足时) {\n    对象.wait();\n  }\n  // 处理逻辑\n}\n```\n\n通知方\n\n```java\n1.获取对象的锁\n2.改变条件\n3.通知所有等待在对象上的线程\n  \nsynchronized(对象) {\n\t改变条件\n  对象.notifyAll();\n}\n```\n\n#### 例子\n\n**例子1**\n\n```java\npublic class WaitNotify {\n    static boolean flag = true;\n    static Object  lock = new Object();\n\n    public static void main(String[] args) throws Exception {\n        Thread waitThread = new Thread(new Wait(), \"WaitThread\");\n        waitThread.start();\n        TimeUnit.SECONDS.sleep(1);\n\n        Thread notifyThread = new Thread(new Notify(), \"NotifyThread\");\n        notifyThread.start();\n    }\n\n    static class Wait implements Runnable {\n        public void run() {\n            // 加锁，拥有lock的Monitor\n            synchronized (lock) {\n                // 当条件不满足时，继续wait，同时释放了lock的锁\n                while (flag) {\n                    try {\n                        System.out.println(Thread.currentThread() + \" flag is true. wait @ \"\n                                           + new SimpleDateFormat(\"HH:mm:ss\").format(new Date()));\n                        lock.wait();\n                    } catch (InterruptedException e) {\n                    }\n                }\n                // 条件满足时，完成工作\n                System.out.println(Thread.currentThread() + \" flag is false. running @ \"\n                                   + new SimpleDateFormat(\"HH:mm:ss\").format(new Date()));\n            }\n        }\n    }\n\n    static class Notify implements Runnable {\n        public void run() {\n            // 加锁，拥有lock的Monitor\n            synchronized (lock) {\n                // 获取lock的锁，然后进行通知，通知时不会释放lock的锁，\n                // 直到当前线程释放了lock后，WaitThread才能从wait方法中返回\n                System.out.println(Thread.currentThread() + \" hold lock. notify @ \" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date()));\n                lock.notifyAll();\n                flag = false;\n                SleepUtils.second(5);\n            }\n            // 再次加锁\n            synchronized (lock) {\n                System.out.println(Thread.currentThread() + \" hold lock again. sleep @ \"\n                                   + new SimpleDateFormat(\"HH:mm:ss\").format(new Date()));\n                SleepUtils.second(5);\n            }\n        }\n    }\n```\n\n**例子2**\n\n通过使用多个线程对0这个值操作，一个线程加1，一个线程减1，交替实现多次\n\n```java\n//第一步 创建资源类，定义属性和操作方法\nclass Share {\n    //初始值\n    private int number = 0;\n    //+1的方法\n    public synchronized void incr() throws InterruptedException {\n        //第二步 判断 干活 通知\n       // 错误写法：\n       // if(number != 0) { //判断number值是否是0，如果不是0，等待\t\t注意：此处写法会导致虚假换新问题，用while\n            // this.wait(); //在哪里睡，就在哪里醒\n        // }\n      \n        // 正确写法\n      \twhile(number != 0) { //判断number值是否是0，如果不是0，等待\n            this.wait(); //在哪里睡，就在哪里醒\n        }\n        //如果number值是0，就+1操作\n        number++;\n        System.out.println(Thread.currentThread().getName()+\" :: \"+number);\n        //通知其他线程\n        this.notifyAll();\n    }\n\n    //-1的方法\n    public synchronized void decr() throws InterruptedException {\n        //判断\n        if(number != 1) {\n            this.wait();\n        }\n        //干活\n        number--;\n        System.out.println(Thread.currentThread().getName()+\" :: \"+number);\n        //通知其他线程\n        this.notifyAll();\n    }\n}\n\npublic class ThreadDemo1 {\n    //第三步 创建多个线程，调用资源类的操作方法\n    public static void main(String[] args) {\n        Share share = new Share();\n        //创建线程\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.incr(); //+1\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"AA\").start();\n\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.decr(); //-1\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"BB\").start();\n    }\n}\n\n// 结果\nAA :: 1\nBB :: 0\nAA :: 1\nBB :: 0\n...\n```\n\n不能用if的原因\n\n```\n主要是虚拟唤醒导致：如果一个线程执行完毕后，通知其他线程，该线程又进入等待睡眠，可能会因为某些原因被唤醒后，if结构的语句就不会判断了，一直往下执行，所以需要将if换成while结构，每次都判断。因为wait在哪里睡眠就在哪里被唤醒，结果被某个异常唤醒了后回不去了，if结构不会在判断了，需要更改为while\n```\n\n\n\n### Condition\n\n```java\npackage com.atguigu.lock;\n\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n//第一步 创建资源类，定义属性和操作方法\nclass Share {\n    private int number = 0;\n\n    //创建Lock\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    //+1\n    public void incr() throws InterruptedException {\n        //上锁\n        lock.lock();\n        try {\n            //判断\n            while (number != 0) {\n                condition.await();\n            }\n            //干活\n            number++;\n            System.out.println(Thread.currentThread().getName()+\" :: \"+number);\n            //通知\n            condition.signalAll();\n        }finally {\n            //解锁\n            lock.unlock();\n        }\n    }\n\n    //-1\n    public void decr() throws InterruptedException {\n        lock.lock();\n        try {\n            while(number != 1) {\n                condition.await();\n            }\n            number--;\n            System.out.println(Thread.currentThread().getName()+\" :: \"+number);\n            condition.signalAll();\n        }finally {\n            lock.unlock();\n        }\n    }\n}\n\npublic class ThreadDemo2 {\n\n    public static void main(String[] args) {\n        Share share = new Share();\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.incr();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"AA\").start();\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.decr();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"BB\").start();\n\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.incr();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"CC\").start();\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.decr();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"DD\").start();\n    }\n\n}\n```\n\n\n\n### 线程间定制化通信\n\n**所谓定制化通信，需要让线程进行一定的顺序操作**\n\n**案列**：启动三个线程，按照如下要求：\nAA打印5此，BB打印10次，CC打印15次，一共进行10轮\n\n**具体思路**：\n每个线程添加一个标志位，是该标志位则执行操作，并且修改为下一个标志位，通知下一个标志位的线程\n\n```java\n//第一步 创建资源类\nclass ShareResource {\n    //定义标志位\n    private int flag = 1;  // 1 AA     2 BB     3 CC\n\n    //创建Lock锁\n    private Lock lock = new ReentrantLock();\n\n    //创建三个condition\n    private Condition c1 = lock.newCondition();\n    private Condition c2 = lock.newCondition();\n    private Condition c3 = lock.newCondition();\n\n    //打印5次，参数第几轮\n    public void print5(int loop) throws InterruptedException {\n        //上锁\n        lock.lock();\n        try {\n            //判断\n            while(flag != 1) {\n                //等待\n                c1.await();\n            }\n            //干活\n            for (int i = 1; i <=5; i++) {\n                System.out.println(Thread.currentThread().getName()+\" :: \"+i+\" ：轮数：\"+loop);\n            }\n            //通知\n            flag = 2; //修改标志位 2\n            c2.signal(); //通知BB线程\n        }finally {\n            //释放锁\n            lock.unlock();\n        }\n    }\n\n    //打印10次，参数第几轮\n    public void print10(int loop) throws InterruptedException {\n        lock.lock();\n        try {\n            while(flag != 2) {\n                c2.await();\n            }\n            for (int i = 1; i <=10; i++) {\n                System.out.println(Thread.currentThread().getName()+\" :: \"+i+\" ：轮数：\"+loop);\n            }\n            //修改标志位\n            flag = 3;\n            //通知CC线程\n            c3.signal();\n        }finally {\n            lock.unlock();\n        }\n    }\n\n    //打印15次，参数第几轮\n    public void print15(int loop) throws InterruptedException {\n        lock.lock();\n        try {\n            while(flag != 3) {\n                c3.await();\n            }\n            for (int i = 1; i <=15; i++) {\n                System.out.println(Thread.currentThread().getName()+\" :: \"+i+\" ：轮数：\"+loop);\n            }\n            //修改标志位\n            flag = 1;\n            //通知AA线程\n            c1.signal();\n        }finally {\n            lock.unlock();\n        }\n    }\n}\n\npublic class ThreadDemo3 {\n    public static void main(String[] args) {\n        ShareResource shareResource = new ShareResource();\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    shareResource.print5(i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"AA\").start();\n\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    shareResource.print10(i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"BB\").start();\n\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    shareResource.print15(i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"CC\").start();\n    }\n}\n\n```\n\n\n\n### Thread.join()\n\n#### 是什么？\n\n```\nThread.join()是一个线程等待的方法，调用该方法的线程会等待目标线程执行完毕后再继续执行\n\njoin()方法通常用于等待其他线程执行完毕后再继续执行，例如在主线程中启动多个子线程，然后使用join()方法等待所有子线程执行完毕后再统一进行处理。\n```\n\n#### 怎么用？\n\n例子: B等待A执行完后再执行\n\n还可以使用CountDownLatch来实现\n\n```java\n// 创建线程A\nThread threadA = new Thread(() -> {\n    // 线程A要执行的代码\n});\n\n// 创建线程B\nThread threadB = new Thread(() -> {\n    // 等待线程A执行完毕\n    try {\n        threadA.join();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    \n    // 线程B要执行的代码\n});\n\n// 启动线程A和线程B\nthreadA.start();\nthreadB.start();\n\n```\n\n### ThreadLocal\n\n#### 是什么？\n\n```\nThreadLocal，即线程变量，表示线程的“局部变量”, 是一个以ThreadLocal对象为键、任意对象为值的存储结构。\n它确保每个线程的ThreadLocal变量都是各自独立的；\nThreadLocal适合在一个线程的处理流程中保持上下文（避免了同一参数在所有方法中传递）；\n```\n\n#### 怎么用？\n\n```java\nstatic ThreadLocal<User> threadLocalUser = new ThreadLocal<>(); // 通常总是以静态字段初始化\n\nvoid processUser(user) {\n    try {\n        threadLocalUser.set(user);\n        step1();\n        step2();\n    } finally {\n      \t// 一定要在finally中清除\n      \t// 因为当前线程执行完相关代码后，很可能会被重新放入线程池中，如果ThreadLocal没有被清除，该线程执行其他代码时，会把上一次的状态带进去。\n        threadLocalUser.remove();\n    }\n}\n\nvoid step1() {\n    User u = threadLocalUser.get();\n    log();\n    printUser();\n}\n\nvoid log() {\n    User u = threadLocalUser.get();\n    println(u.name);\n}\n\nvoid step2() {\n    User u = threadLocalUser.get();\n    checkUser(u.id);\n}\n```\n\n**优化：自动释放**\n\n例子：一个保存了当前用户名的`ThreadLocal`可以封装为一个`UserContext`对象：\n\n```java\npublic class UserContext implements AutoCloseable {\n\n    static final ThreadLocal<String> ctx = new ThreadLocal<>();\n\n    public UserContext(String user) {\n        ctx.set(user);\n    }\n\n    public static String currentUser() {\n        return ctx.get();\n    }\n\n    @Override\n    public void close() {\n        ctx.remove();\n    }\n}\n```\n\n使用\n\n```java\ntry (var ctx = new UserContext(\"Bob\")) {\n    // 可任意调用UserContext.currentUser():\n    String currentUser = UserContext.currentUser();\n} // 在此自动调用UserContext.close()方法释放ThreadLocal关联对象\n```\n\n\n\n## 5 线程应用实例\n\n### 等待超时模式\n\n调用一个方法时等待一段时间，如果该方法能够在给定的时间之内得到结果，直接返回；反之，超时返回默认结果。\n\n```java\n    public synchronized Object get(long mills) {\n        long future = System.currentTimeMillis() + mills;\n        long remaining = mills;\n        while(result == null && remaining > 0) {\n            wait(remaining);\n            remaining = future - System.currentTimeMillis();\n        }\n\n        return result;\n    }\n```\n\n\n\n### 数据库连接池示例\n\n描述\n\n```\n使用等待超时模式构建一个简单的数据库连接池，模拟从连接池中获取、使用和释放连接的过程。\n客户端获取连接的过程被设定为等待超时的模式，1000ms内无法获取可用连接返回null。\n连接池大小为10，通过调用客户端的连线数来模拟无法获取连接的场景。\n```\n\n连接池 `ConnectionPool.java`\n\n```java\npackage ConnectionPool;\n\nimport java.sql.Connection;\nimport java.util.LinkedList;\n\npublic class ConnectionPool {\n\n    private LinkedList<Connection> pool = new LinkedList<>();\n\n    public ConnectionPool(int initialSize) {\n        if(initialSize <= 0) return;\n        for(int i = 0; i < initialSize; i++) {\n            pool.addLast(ConnectionDriver.createConnection());\n        }\n    }\n\n    public void releaseConnection(Connection connection) {\n        if(connection == null) return;\n        synchronized(pool) {\n            // 添加后需要进行通知，这样其他消费者能够感知到链接池中已经归还了一个链接\n            pool.addLast(connection);\n            pool.notifyAll();\n        }\n    }\n\n    // 在mills内无法获取到连接，将会返回null\n    public Connection fetchConnection(long mills) throws InterruptedException {\n        synchronized(pool) {\n            // 完全超时\n            if(mills <= 0) {\n                while(pool.isEmpty()) {\n                    pool.wait();\n                }\n\n                return pool.removeFirst();\n            } else {\n                long future = System.currentTimeMillis() + mills;\n                long remaining = mills;\n                while(pool.isEmpty() && remaining > 0) {\n                    pool.wait(remaining);\n                    remaining = future - System.currentTimeMillis();\n                }\n\n                Connection result = null;\n                if(!pool.isEmpty()) {\n                    result = pool.removeFirst();\n                }\n                return result;\n            }\n        }\n    }\n}\n```\n\n数据库连接驱动器\n\n```java\npackage ConnectionPool;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * 这段代码主要实现了一个Connection的代理类。在Connection的代理类中，如果调用的方法是commit方法，就会休眠100毫秒。最后，代理类返回的结果是null。\n *\n * 这段代码的作用是模拟一个数据库连接的commit操作，以及在commit操作时的休眠效果。\n * 通常情况下，数据库的commit操作需要一定的时间才能完成，因此在实际应用中需要通过代理类来模拟commit操作的耗时。\n * 这样就能更好地测试代码在多线程环境下的可靠性。\n *\n * 这段代码的关键在于使用了代理类来实现Connection的commit操作。\n * 在代理类中，如果调用的方法是commit方法，就会休眠100毫秒。\n * 这种方式可以模拟commit操作需要一定的时间才能完成的情况。\n * 同时，由于代理类返回的结果是null，因此在测试时需要根据实际情况进行判断。\n */\npublic class ConnectionDriver {\n\n    static class ConnectionHandler implements InvocationHandler {\n        // @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            if (method.getName().equals(\"commit\")) {\n                TimeUnit.MILLISECONDS.sleep(100);\n            }\n            return null;\n        }\n    }\n\n\n    // 创建一个Connection的代理，在commit时休眠1秒\n    public static final Connection createConnection() {\n        return (Connection) Proxy.newProxyInstance(\n                ConnectionDriver.class.getClassLoader(),\n                new Class<?>[]{Connection.class},\n                new ConnectionHandler()\n        );\n    }\n}\n\n```\n\n测试\n\n```java\npackage ConnectionPool;\n\nimport java.sql.Connection;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n\npublic class ConnectionPoolTest {\n    static ConnectionPool pool = new ConnectionPool(10);\n    static CountDownLatch start = new CountDownLatch(1);    // 相当于一个总开关，线程开启后阻塞在同一个地方，开启后所有线程统一执行\n    static CountDownLatch end;      // 打印日志的总开关，待所有线程执行解释后，再输出日志\n\n    static class ConnetionRunner implements Runnable {\n        int count;                  // 要起的线程数\n        AtomicInteger got;          // 记录获取到连接的数量\n        AtomicInteger notGot;       // 记录获取不到连接的数量\n\n        public ConnetionRunner(int count, AtomicInteger got, AtomicInteger notGot) {\n            this.count = count;\n            this.got = got;\n            this.notGot = notGot;\n        }\n\n        public void run() {\n            try {\n                start.await();  // 线程启动时先统一阻塞到该处，start.countDown();后统一执行\n            } catch (Exception ex) {\n\n            }\n            while (count > 0) {\n                try {\n                    // 从线程池中获取连接，如果1000ms内无法获取到，将会返回null\n                    // 分别统计连接获取的数量got和未获取到的数量notGot\n                    Connection connection = pool.fetchConnection(1000);\n                    if (connection != null) {\n                        try {\n                            connection.createStatement();\n                            connection.commit();\n                        } finally {\n                            pool.releaseConnection(connection);\n                            got.incrementAndGet();\n                        }\n                    } else {\n                        notGot.incrementAndGet();\n                    }\n                } catch (Exception ex) {\n                } finally {\n                    count--;\n                }\n            }\n            end.countDown();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        // 线程数量，可以线程数量进行观察\n        int threadCount = 50;\n        end = new CountDownLatch(threadCount);\n        int count = 20;\n        AtomicInteger got = new AtomicInteger();\n        AtomicInteger notGot = new AtomicInteger();\n        for (int i = 0; i < threadCount; i++) {\n            Thread thread = new Thread(new ConnetionRunner(count, got, notGot), \"ConnectionRunnerThread\");\n            thread.start();\n        }\n        start.countDown();\n        end.await();        // 50个线程执行完之后，才开始输出日志\n        System.out.println(\"total invoke: \" + (threadCount * count));\n        System.out.println(\"got connection:  \" + got);\n        System.out.println(\"not got connection \" + notGot);\n    }\n\n}\n\n```\n\n运行结果\n\n```\ntotal invoke: 1000\ngot connection:  826\nnot got connection 174\n```\n\n### 线程池\n\n`ThreadPool.java`\n\n```java\n/**\n * 线程池接口定义\n * @param <Job>\n */\npublic interface ThreadPool<Job extends Runnable> {\n    // 执行一个Job，这个Job需要实现Runnable\n    void execute(Job job);\n\n    // 关闭线程池\n    void shutdown();\n\n    // 增加工作者线程\n    void addWorkers(int num);\n\n    // 减少工作者线程\n    void removeWorker(int num);\n\n    // 得到正在等待执行的任务数量\n    int getJobSize();\n}\n```\n\n`DefaultThreadPool.java`\n\n```java\npackage ThreadPool;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class DefaultThreadPool <Job extends Runnable> implements ThreadPool<Job> {\n    // 线程池最大限制数\n    private static final int      MAX_WORKER_NUMBERS     = 10;\n    // 线程池默认的数量\n    private static final int      DEFAULT_WORKER_NUMBERS = 5;\n    // 线程池最小的数量\n    private static final int      MIN_WORKER_NUMBERS     = 1;\n    // 这是一个工作列表，将会向里面插入工作\n    private final LinkedList<Job> jobs                   = new LinkedList<Job>();\n    // 工作者列表\n    private final List<Worker> workers                   = Collections.synchronizedList(new ArrayList<Worker>());\n    // 工作者线程的数量\n    private int                   workerNum              = DEFAULT_WORKER_NUMBERS;\n    // 线程编号生成\n    private AtomicLong threadNum                         = new AtomicLong();\n\n    public DefaultThreadPool() {\n        initializeWokers(DEFAULT_WORKER_NUMBERS);\n    }\n\n    public DefaultThreadPool(int num) {\n        workerNum = num > MAX_WORKER_NUMBERS ? MAX_WORKER_NUMBERS : num < MIN_WORKER_NUMBERS ? MIN_WORKER_NUMBERS : num;\n        initializeWokers(workerNum);\n    }\n\n    @Override\n    public void execute(Job job) {\n        if(job != null) {\n            // 添加一个工作，然后进行通知\n            synchronized (jobs) {\n                jobs.addLast(job);\n                jobs.notifyAll();\n            }\n        }\n    }\n\n    @Override\n    public void shutdown() {\n        for(Worker worker : workers) {\n            worker.shutdown();\n        }\n    }\n\n    @Override\n    public void addWorkers(int num) {\n        synchronized (jobs) {\n            // 限制新增的Worker数量不能超过最大值\n            if(num + this.workerNum > MAX_WORKER_NUMBERS) {\n                num = MAX_WORKER_NUMBERS - this.workerNum;\n            }\n            initializeWokers(num);\n            this.workerNum += num;\n        }\n    }\n\n    @Override\n    public void removeWorker(int num) {\n        synchronized (jobs) {\n            if(num >= this.workerNum) {\n                throw new IllegalArgumentException(\"beyond workNum\");\n            }\n            // 按照给定的数量停止Worker\n            int count = 0;\n            while (count < num) {\n                workers.get(count).shutdown();\n                count++;\n            }\n            this.workerNum -= count;\n        }\n    }\n\n    @Override\n    public int getJobSize() {\n        return jobs.size();\n    }\n\n    // 初始化线程工作者\n    private void initializeWokers(int num) {\n        for (int i = 0; i < num; i++) {\n            Worker worker = new Worker();\n            workers.add(worker);\n            Thread thread = new Thread(worker, \"ThreadPool-Worker-\" + threadNum.incrementAndGet());\n            thread.start();\n        }\n    }\n\n    // 工作者，负责消费任务\n    class Worker implements Runnable {\n        // 是否工作\n        private volatile boolean running = true;\n\n        public void run() {\n            while(running) {\n                Job job = null;\n                synchronized (jobs) {\n                    while(jobs.isEmpty()) {\n                        try {\n                            jobs.wait();\n                        } catch (InterruptedException e) {\n                            // 感知到外部对WorkerThread的中断操作，返回\n                            Thread.currentThread().interrupt();\n                            return;\n                        }\n                        // 去除一个job\n                        job = jobs.removeFirst();\n                    }\n                }\n\n                if(job != null) {\n                    try {\n                        job.run();\n                    } catch (Exception e) {\n                        // 忽略Job执行中的Exception\n                    }\n                }\n            }\n        }\n\n        public void shutdown() {\n            running = false;\n        }\n    }\n}\n\n```\n\n","timestamp":1691670417385},{"name":"02-Java中的锁.md","path":"001-JAVA/010-Java并发编程/02-Java中的锁.md","content":"\n\n# Java中的锁\n\n## Lock接口\n\n### 什么是Lock接口\n\n```java\npublic interface Lock {\n    void lock(); \n    void lockInterruptibly() throws InterruptedException; \n    boolean tryLock(); \n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException; \n    void unlock(); Condition newCondition();\n}\n```\n\n```\nLock是Java中提供的一个接口，用于实现【线程同步机制】，它可以替代Synchronized关键字。\nLock接口提供了比Synchronized更灵活、更强大的线程同步功能，可以用于解决多线程中的资源竞争和死锁等问题。\nLock接口的实现类有很多种，其中最常用的是ReentrantLock。\n\nLock接口提供了以下主要方法：\n- lock()：获取锁，如果锁已经被其他线程获取，则当前线程进入等待状态。\n- unlock()：释放锁，如果当前线程持有锁，则释放锁并唤醒等待的线程。\n- tryLock()：尝试获取锁，如果锁没有被其他线程获取，则获取锁并返回true，否则立即返回false。\n- tryLock(long time, TimeUnit unit)：尝试获取锁，如果锁没有被其他线程获取，则获取锁并返回true，否则等待指定时间后返回false。\n- newCondition()：创建一个Condition对象，用于实现等待/通知机制。\n\n需要注意的是，在使用Lock接口时，需要在finally代码块中释放锁，以确保锁一定会被释放，避免死锁的发生。\n```\n\n#### 什么是线程同步机制？\n\n```\n- 是什么？\n线程同步机制是多线程编程中常用的一种机制，用于控制多个线程对共享资源的访问。\n\n- 为什么？\n在多线程环境中，多个线程同时访问共享资源可能会导致竞争条件和数据不一致等问题，因此需要使用线程同步机制来避免这些问题的发生\n\n- 怎么样？\n1.synchronized\n2.Lock接口\n\n- 基本原理\n线程同步机制的基本原理是在共享资源的访问前获取锁，只有获取锁的线程才能访问共享资源，其他线程需要等待锁的释放。\n在共享资源访问完成后，释放锁，让其他线程可以继续访问共享资源。这样就保证了共享资源在任何时刻只能被一个线程访问，避免了竞争条件和数据不一致等问题的发生。\n\n- 使用时注意的问题\n1.使用线程同步机制时，应该避免死锁、饥饿等问题的发生，以确保程序的正常运行\n2.同时，在使用synchronized关键字时，应该尽量减小同步块的范围，以提高程序的性能。\n3.在使用Lock接口时，需要在finally代码块中释放锁，以确保锁一定会被释放，避免死锁的发生。\n```\n\n##### 在使用synchronized关键字时，为什么要减小同步块的范围？\n\n```\n1.提高性能\n范围越大，需要等待获取锁的线程越多，导致在获取锁的过程中需要等待其他线程释放锁，而其他线程释放锁的时间也会比较长，这就会造成线程的等待时间过长，降低程序的运行效率。\n2.避免死锁\n不同的线程可能会竞争多个锁，释放锁的时间也会比较长，导致相互等待，形成死锁。\n\n因此，为了避免以上问题的发生，应该尽量减小同步块的范围，只在必要的地方进行同步，这样可以提高程序的性能，同时也可以降低出现死锁等问题的概率。\n```\n\n##### 为什么使用lock接口需要在finally代码块中释放锁\n\n```\n- 为什么？\n在使用Lock接口进行线程同步时，需要手动获取和释放锁，这是两个独立的操作，如果在获取锁之后发生异常，就有可能导致锁没有被释放，从而导致死锁等问题的发生。\n- 怎么样？\n因此，将释放锁的操作放在finally代码块中，这样可以确保在任何情况下都会释放锁，避免死锁等问题的发生。\n```\n\n### Lock和Synchronized的区别？\n\n```\n- 是什么 & 作用\nLock和Synchronized都是Java中用于实现线程同步的机制，它们的目的是为了避免线程间的竞争条件和数据不一致等问题。它们的区别如下：\n\n- 区别\n1.锁的获取方式：\n\tSynchronized是在进入同步代码块或同步方法时，自动获取锁，退出同步代码块或方法时自动释放锁；而Lock需要手动获取锁，并且必须手动释放锁。\n2.锁的粒度：\n\tSynchronized只能对整个方法或代码块进行加锁，而Lock可以对代码块进行更细粒度的控制。\n3.可中断性：\n\t在获取锁时，Synchronized是不可中断的，即使该线程在等待锁的过程中被中断，也不会释放锁；而Lock可以根据需要设置锁的可中断性。\n4.公平锁：\n\tSynchronized是非公平锁，不保证等待时间最长的线程最先获取锁；而Lock可以通过参数指定为公平锁或非公平锁。\n5.性能：\n\t相比较而言，Lock的性能比Synchronized好，在高并发的情况下，Lock的吞吐量比Synchronized更高。\n\n需要注意的是，Lock是在JDK 5中引入的，而Synchronized是Java早期就提供的同步机制。由于Lock相比Synchronized更灵活和高效，因此在实际开发中，使用Lock的场景会更多。\n```\n\n### Lock的使用方式\n\n```java\nLock lock = new ReentrantLock();\nlock.lock();\ntry {\n  ...\n} finally {\n  lock.unlock();\n}\n```\n\n\n\n## 队列同步器AQS\n\n\n\n## 重入锁ReentrantLock\n\n### 什么是重入锁？\n\n```\n- 是什么？\n可重入锁是指同一个线程在持有某个锁的情况下，可以继续获取该锁而不会出现死锁的情况\n\n- synchronized关键字实现原理\n每个对象都有一个监视器锁（monitor），线程进入同步块时获取该对象的监视器锁，并在同步块结束时释放该锁，当一个线程在持有该锁的情况下再次进入同步块时，会自动获取该锁，而不会被阻塞。\n\n- ReentrantLock重入锁实现原理\n它使用一个计数器来记录线程获取锁的次数。当一个线程第一次获取锁时，计数器的值为1，当同一个线程再次获取锁时，计数器的值会递增，当线程退出同步块时，计数器的值递减，直到计数器的值为0时，锁被释放。这种机制保证了线程可以多次获取同一个锁而不会出现死锁的情况。\n```\n\n### 什么是ReentrantLock & 特点\n\n```\n- 是什么？\nReentrantLock是Java中实现Lock接口的一个类，它提供了与synchronized关键字类似的线程同步机制\n\n- 特点\n1.可重入性：\n\t与synchronized关键字一样，ReentrantLock支持可重入锁，即同一个线程可以多次获取同一个锁而不会死锁\n2.公平锁与非公平锁：\n\tReentrantLock提供了两种锁的实现方式，即公平锁和非公平锁。公平锁会按照线程的请求顺序来分配锁，而非公平锁则允许线程在竞争时插队，可能会导致某些线程长时间等待。\n3.条件变量：\n\tReentrantLock提供了Condition接口的实现类Condition，它可以将一个锁分为多个条件，使得线程可以在指定条件下等待和唤醒。这使得线程间的通信变得更加灵活。\n3.可中断性：\n\t与synchronized关键字不同，ReentrantLock提供了可中断锁的机制。即当一个线程等待获取锁时，可以通过中断等待的线程来结束等待。\n\nReentrantLock相对于synchronized关键字来说，具有更强的灵活性和可定制性，但需要手动获取和释放锁，使用时也需要注意避免死锁、饥饿等问题的发生。\n```\n\n\n\n### 公平锁与非公平锁\n\n\n\n## 读写锁\n\n### 什么是读写锁？\n\n```\n读写锁（ReadWriteLock）是Java中的一种同步机制，允许多个线程同时读共享资源，但只允许一个线程写共享资源。它是一种悲观锁，因为它默认情况下假设写操作比读操作更加耗时，因此优先考虑写操作的互斥。\n\n读写锁的主要特点是：\n1.在同一时刻可以允许多个线程进行读操作。\n2.写操作时独占锁，只有一个线程可以进行写操作。\n3.写操作和读操作之间互斥，即在一个线程进行写操作的时候，其他线程无法进行读和写操作，直到写操作完成。\n\n读写锁通常分为两种类型：读锁和写锁，写锁是独占锁，读锁是共享锁。在读锁被获取的情况下，其他线程仍然可以获取读锁，但不能获取写锁，因为写锁需要排除所有的读锁和其他的写锁。\n```\n\n\n\n### 读写锁的使用方式\n\n例子：非线程安全的HashMap作为缓存的实现\n\n```java\npublic class Cache {\n    private static final Map<String, Object>    map = new HashMap<String, Object>();\n    private static final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n    private static final Lock                   r   = rwl.readLock();\n    private static final Lock                   w   = rwl.writeLock();\n\n    public static final Object get(String key) {\n        r.lock();\t// 获取读锁，并发访问该方法时不会被阻塞\n        try {\n            return map.get(key);\n        } finally {\n            r.unlock();\n        }\n    }\n\n    public static final Object put(String key, Object value) {\n        w.lock();\t// 获取写锁，其他线程获取读、写锁会被阻塞，只有该写锁释放后才能继续操作\n        try {\n            return map.put(key, value);\n        } finally {\n            w.unlock();\n        }\n    }\n\n    public static final void clear() {\n        w.lock();\n        try {\n            map.clear();\n        } finally {\n            w.unlock();\n        }\n    }\n}\n```\n\n\n\n### 读写锁的实现\n\n#### 读写状态的设计\n\n#### 写锁的获取与释放\n\n#### 读锁的获取与释放\n\n#### 锁降级\n\n\n\n### Condition接口\n\n#### 使用方式\n\n##### 例子1\n\n```java\npublic class ConditionUseCase {\n    Lock      lock      = new ReentrantLock();\n    Condition condition = lock.newCondition();\n\n    public void conditionWait() throws InterruptedException {\n        lock.lock();\n        try {\n            condition.await();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void conditionSignal() throws InterruptedException {\n        lock.lock();\n        try {\n            condition.signal();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n```\n\n##### 例子2： 有界队列\n\n有界队列：是一种特殊的队列，当队列为空时，队列的获取操作将会阻塞获取线程，直到队列中有新增元素；\n\n当队列已满时，队列的插入操作将会阻塞插入线程，直到队列出现“空位”\n\n```java\npackage Lock;\n\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class BoundedQueue <T> {\n    private Object[] items;\n    // 添加的下标，删除的下标和数组当前数量\n    private int       addIndex, removeIndex, count;\n    private Lock      lock      = new ReentrantLock();\n    private Condition notEmpty  = lock.newCondition();\n    private Condition notFull   = lock.newCondition();\n\n    public BoundedQueue(int size) {\n        items = new Object[size];\n    }\n\n    // 添加一个元素，如果数组满，则添加线程进入等待状态，直到有“空位”\n    public void add(T t) throws InterruptedException{\n        lock.lock();\n        try {\n            while(count  == items.length) {\n                notFull.await();\n            }\n            items[addIndex] = t;\n            if(++addIndex == items.length) {\n                addIndex = 0;\n            }\n            ++count;\n            notEmpty.signal();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    // 由头部删除一个元素，如果数组空，则删除线程进入等待状态，直到有新添加元素\n    // @SuppressWarnings(\"unchecked\")注解告诉编译器忽略类型转换时的警告信息。Object类型的对象x强制转换为了泛型类型T\n    @SuppressWarnings(\"unchecked\")\n    public T remove() throws InterruptedException {\n        lock.lock();\n        try {\n            while(count == 0) {\n                notEmpty.await();\n            }\n            Object x = items[removeIndex];\n            if(++removeIndex == items.length) {\n                removeIndex = 0;\n            }\n            --count;\n            notFull.signal();\n            return (T) x;\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n```\n\n\n\n### Condition的实现原理\n\nTODO\n","timestamp":1691670417385},{"name":"03-Java并发容器和框架.md","path":"001-JAVA/010-Java并发编程/03-Java并发容器和框架.md","content":"# Java并发容器和框架\n\n## ConcurrentHashMap\n\n### HashMap为什么不是线程安全的？\n\n```java\nHashMap 不是线程安全的主要原因是它在进行 put 和 resize 操作时，没有进行同步处理。\n具体来说，在进行 resize 操作时，需要重新计算每个元素的索引位置，并且重新分配数组，如果多个线程同时进行 resize 操作，会导致多个线程在操作同一个数组，产生冲突，进而导致数据丢失或死循环等问题。\n另外，在进行 put 操作时，由于 HashMap 不是线程安全的，因此多个线程可能同时修改同一个链表，从而导致链表数据不一致或链表出现环等问题。\n\npublic class Test {\n    public static void main(String[] args) {\n        final HashMap<String, String> map = new HashMap<String, String>(2);\n        Thread t = Thread(new Runnable() {\n            public void run() {\n                for(int i = 0; i < 10000; i++) {\n                    new Thread(new Runnable() {\n                        @Override\n                        public void run() {\n                            map.put(UUID.randomUUID().toString(), \"\");\n                        }\n                    }, \"ftf\" + i).start();\n                }\n            }\n        }, \"ftf\");\n        t.start();\n        t.join();\n    }\n}\n```\n\n### HashMap的put操作为什么会出现环？原理是什么？\n\n```\n在 HashMap 内部，每个元素都是一个 Entry 对象，包含了键、值以及指向下一个 Entry 的指针，它们被存储在一个数组中。在执行 put 操作时，首先会计算 key 的哈希值，然后根据这个哈希值定位到数组中的一个索引位置。如果该索引位置为空，那么就将 Entry 对象放入该位置；如果该位置已经有了 Entry 对象，那么就顺着链表一直往下遍历，直到找到一个空的位置，并将 Entry 对象放入该位置。\n\n在多线程环境下，如果多个线程同时对 HashMap 进行 put 操作，可能会出现多个线程定位到了同一个索引位置，并且同时在链表头插入新的 Entry 对象，此时就会出现多个线程并发修改同一个链表的情况。这时就有可能出现覆盖的情况，即一个线程的修改被另一个线程覆盖了，导致数据丢失和死循环等问题。\n```\n\n\n\n### 为什么要使用ConcurrentHashMap？优势？\n\n```\n- 现有技术存在的问题\n1.【HashMap是线程非安全的】。\n\t在多线程环境下，使用hashMap进行put操作会引起死循环，导致CPU利用率接近100%，所以在并发情况下不能使用HashMap\n2.【HashTable线程安全，但效率低下】\n  1）HashTable容器使用synchronized来保证线程安全，同一时刻只有一个线程能够访问哈希表，其他线程会被阻塞。一个线程put时其他线程不能put、get。\n  2）HashTable 在进行扩容时，需要将整个哈希表重新计算，并将数据复制到新的哈希表中，这也会导致性能的下降。\n  \n- ConcurrentHashMap的优势\n1.【线程安全】：ConcurrentHashMap是线程安全的，多个线程可以同时访问和修改ConcurrentHashMap中的元素，而不会导致数据结构的损坏或数据的丢失。\n2.【更高的并发性能】：ConcurrentHashMap的实现采用了分段锁的机制，对不同的数据段采用不同的锁，因此可以支持更高的并发性能，多个线程可以同时读取ConcurrentHashMap中的不同元素，而不会产生锁竞争。\n3.【更高的扩展性】：ConcurrentHashMap在扩容时可以分段进行扩容，只需要锁住当前需要扩容的数据段，而不需要锁住整个HashMap，因此扩容时可以支持更高的并发性能。\n4.【更好的迭代性能】：ConcurrentHashMap提供了一个专门的迭代器ConcurrentHashMap.KeySetView，可以在迭代过程中保证线程安全性和数据的一致性。\n```\n\n\n\n### 实现原理\n\nTodo\n\n\n\n## ConcurrentLinkedQueue\n\n### 实现安全队列的方法\n\n```\n1.使用阻塞算法\n  用一个锁（入队和出队用同一把锁）或两个锁（入队和出队用不同的锁）来实现\n2.使用非阻塞算法\n  使用循环CAS的方式实现。即ConcurrentLinkedQueue的实现方式\n```\n\n### 是什么？\n\n```\nConcurrentLinkedQueue是Java中的一个线程安全的队列数据结构，可以被多个线程同时访问，支持高并发场景下的高效数据存储和访问。\n\n- 实现方式\nConcurrentLinkedQueue是基于链表实现的，它采用了一种叫做\"无锁并发编程\"的技术，利用CAS（Compare And Swap）操作和volatile关键字实现了线程安全。\n- 主要特点\n它的主要特点是在高并发情况下性能比较好，因为它没有使用锁，而是采用了一些比较高级的技术来实现并发控制，避免了因为锁竞争而导致的性能问题。\n\n- 基本操作\nConcurrentLinkedQueue支持队列的基本操作，包括入队（offer()）、出队（poll()）、获取队首元素（peek()）等。除此之外，它还提供了一些扩展操作，如批量添加元素（addAll()）、元素替换（replace()）等。\n- 主要缺点\n它的主要缺点是不支持随机访问，因为它是基于链表实现的，所以无法像ArrayList那样根据下标随机访问元素。\n```\n\n### 实现原理\n\nTODO\n\n\n\n## Java中的阻塞队列\n\n### 什么是阻塞队列？\n\n```\n\n```\n\n\n\n### 为什么使用？使用场景\n\n### Java中的阻塞队列\n\n```\nArrayBlockingQueue: 一个由数组结构组成的有界阻塞队列\nLinkedBlockingQueue: 链表、无界队列\nPriorityBlockingQueue: 优先级排序、无界队列\nDelayQueue: 优先级队列实现的无界阻塞队列\nSynchronousQueue: 不存储元素的阻塞队列\nLinkedTransferQueue: 链表、无界阻塞队列\nLinkedBlockingQUeue: 链表、双向组设队列\n```\n\n### 实现原理\n\nTODO\n\n\n\n## Fork/Join框架\n\n### 是什么？\n\n```\n是Java7提供的一个用于并行执行任务的框架，是一个把大任务分割成若干小任务，最终汇总每个小任务结果后得到大任务结果的框架。\n```\n\n### 工作窃取算法\n\n### Fork/Join框架设计\n\n### 如何使用？\n\n### 实现原理\n\n\n\n","timestamp":1691670417385},{"name":"04-Java中的原子操作类.md","path":"001-JAVA/010-Java并发编程/04-Java中的原子操作类.md","content":"# Java中的13个原子操作类\n\n## 原子更新基本类型类\n\n### 有哪些？\n\n```\nAtomicBoolean: 原子更新布尔类型\nAtomicInteger：原子更新整型\nAtomicLong：原子更新长整型\n```\n\n### 如何使用？\n\n三个类提供的方法几乎一摸一样，以`AtomicInteger`\n\n```\nint addAndGet(int delta)\nboolean compareAndSet(int expect, int update)  如果输入的数值等于预期值，则以原子方式将该值设置为输入的值\nint getAndIncrement() 以原子方式将当前值+1，返回自增前的值\nvoid lazySet(int newValue)\nint getAndSet(int newValue) 以原子方式设置为newValue值，返回旧值\n```\n\n### getAndIncrement实现原理\n\nTODO\n\n## 原子更新数组\n\n### 有哪些\n\n```\nAtomicIntegerArray 原子更新整型数组里的元素\nAtomicLongArray 原子更新长整型数组里的元素\nAtomicReferenceArray 原子更新引用类型数组里的元素\n```\n\n\n\n## 原子更新引用类型\n\n\n\n## 原子更新字段类","timestamp":1691670417385},{"name":"05-Java中的并发工具类.md","path":"001-JAVA/010-Java并发编程/05-Java中的并发工具类.md","content":"# Java中的并发工具类\n\n## CountDownLatch\n\n### 是什么？有什么用？\n\n```\n\n```\n\n\n\n### 使用案例：模拟解析Excel里的多个sheel的数据\n\njoin()实现\n\n```java\npublic class JoinCountDownLatchTest {\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread parser1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(Thread.currentThread().getName());\n            }\n        });\n\n        Thread parser2 = new Thread(()->{\n            System.out.println(Thread.currentThread().getName());\n        }, \"parser2\");\n\n        parser1.start();\n        parser2.start();\n        parser1.join();\n        parser2.join();\n    }\n}\n```\n\nCountDownLatch实现\n\n```java\npublic class CountDownLatchTest {\n\n    static CountDownLatch c = new CountDownLatch(2);\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(()->{\n            System.out.println(1);\n            c.countDown();\n            System.out.println(2);\n            c.countDown();\n        }).start();\n\n        c.wait();\n        System.out.println(3);\n    }\n}\n```\n\n\n\n## 同步屏障CyclicBarrier\n\n### 是什么？\n\n```\nCyclicBarrier是Java中的一个同步辅助类，它可以让一组线程在某个屏障点处相互等待，然后同时继续执行。\n它的主要作用是实现线程间的同步，确保多个线程在某个点上达到同步状态后再同时执行后续操作。\n\nCyclicBarrier的构造函数可以指定一个参与同步的线程数量，当有足够数量的线程调用了CyclicBarrier的await()方法后，所有线程都会被释放，并继续执行后续的任务。\n\nCyclicBarrier适用于需要等待所有线程都到达某个状态后再同时执行后续操作的场景，常见的应用包括多线程计算任务的结果合并、分布式系统中任务的协调与等待等。\n```\n\n### 使用方法\n\n`CyclicBarrier(int parties)`\n\n`parties表示屏障拦截的线程数量`\n\n```java\npublic class CyclicBarrierTest {\n\n    static CyclicBarrier c = new CyclicBarrier(2);\t\n\n    public static void main(String[] args) {\n        new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                try {\n                    c.await();\t\t// 调用await告诉CyclicBarrier已经到达屏障，然后阻塞；两个线程执行c.await()才继续执行\n                } catch (Exception e) {\n\n                }\n                System.out.println(1);\n            }\n        }).start();\n\n        try {\n            c.await();\n        } catch (Exception e) {\n\n        }\n        System.out.println(2);\n    }\n}\n```\n\n`CyclicBarrier(int parties, Runnable barrierAction)`\n\n`barrierAction表示到达屏障时优先执行的线程`\n\n```java\npublic class CyclicBarrierTest2 {\n\n    static CyclicBarrier c = new CyclicBarrier(2, new A());\n\n    public static void main(String[] args) {\n        new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                try {\n                    c.await();\n                } catch (Exception e) {\n\n                }\n                System.out.println(1);\n            }\n        }).start();\n\n        try {\n            c.await();\n        } catch (Exception e) {\n\n        }\n        System.out.println(2);\n    }\n\n    static class A implements Runnable {\n\n        @Override\n        public void run() {\n            System.out.println(3);\n        }\n\n    }\n\n}\n```\n\n### 应用场景\n\n```\nCyclicBarrier适用于需要等待所有线程都到达某个状态后再同时执行后续操作的场景，常见的应用包括多线程计算任务的结果合并、分布式系统中任务的协调与等待等。\n```\n\n```\n例子：用一个Excel保存了用户的所有银行流水，每个Sheet保存一个账户近一年的每笔银行流水，现在需要统计用户的日均银行流水：\n1 先用多线程处理每个sheet里的银行流水，都执行完后，得到每个sheet的日均银行流水\n2 barrierAction用这些线程的计算结果，计算出整个Excel的日均银行流水\n```\n\n```java\nimport java.util.concurrent.*;\nimport java.util.Map.Entry;\n\npublic class BankWaterService implements Runnable {\n\n    /* 创建4个屏障，处理完之后执行当前类的run方法 */\n    private CyclicBarrier c = new CyclicBarrier(4, this);\n\n    /* 假设有4个sheet， 所以只需要启动4个线程 */\n    private Executor executor = Executors.newFixedThreadPool(4);\n\n    /* 保存每个sheet计算出的银流结果 */\n    private ConcurrentHashMap<String, Integer> sheetBankWaterCount = new ConcurrentHashMap<>();\n\n    private void count() {\n        for(int i = 0; i < 4; i++) {\n            executor.execute(()->{\n                // 计算当前sheet的银流数据，计算代码省略\n                sheetBankWaterCount.put(Thread.currentThread().getName(), 1);\n\n                // 银流计算完成，插入一个屏障\n                try {\n                    c.await();\n                } catch (InterruptedException | BrokenBarrierException e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n    }\n\n    public void run() {\n        int result = 0;\n        // 汇总每个sheet计算出的结果\n        for(Entry<String, Integer> sheet : sheetBankWaterCount.entrySet()) {\n            result += sheet.getValue();\n        }\n\n        // 将结果输出\n        sheetBankWaterCount.put(\"result: \", result);\n        System.out.println(result);\n    }\n\n    public static void main(String[] args) {\n        BankWaterService bankWaterService = new BankWaterService();\n        bankWaterService.count();\n    }\n}\n```\n\n## CountDownLatch和CyclicBarrier的区别\n\n```\n1.使用方式：CyclicBarrier用于一组线程中的多个线程等待彼此达到一个共同的屏障点后再同时继续执行；而CountDownLatch用于一个线程或多个线程等待其他线程完成某个操作后再继续执行。\n\n2.循环使用性：CyclicBarrier是可重用的，可以在多个循环中使用。当所有参与线程都到达屏障点后，CyclicBarrier会重置并可以再次使用；而CountDownLatch是一次性的，一旦计数器归零，就不能再次使用。\n\n3.参与线程数量：CyclicBarrier可以在创建时指定参与同步的线程数量，可以灵活地适应不同的场景需求；而CountDownLatch的计数器是固定的，一旦创建就无法修改。\n\n4.屏障动作：CyclicBarrier可以指定在所有线程到达屏障点时执行一个可选的屏障动作（Runnable）；而CountDownLatch没有提供屏障动作的功能。\n\n5.同步点的性质：CyclicBarrier是同步点，所有线程在此等待，直到所有线程都达到同步点才能继续执行；而CountDownLatch只是一个等待点，线程等待计数器变为0后就可以继续执行。\n```\n\n“一组线程中的多个线程等待彼此达到一个共同的屏障点后再同时继续执行” 和 “一个线程或多个线程等待其他线程完成某个操作后再继续执行”有啥区别\n\n```\n这两个描述之间的区别在于等待的对象和等待的条件。\n\n在CyclicBarrier中，一组线程中的多个线程等待彼此达到一个共同的屏障点后再同时继续执行。这意味着每个线程在达到屏障点之前都会阻塞等待其他线程的到来。只有当所有线程都到达屏障点后，它们才会同时继续执行后续操作。\n\n而在CountDownLatch中，一个线程或多个线程等待其他线程完成某个操作后再继续执行。这意味着某个线程或多个线程会调用CountDownLatch的await()方法进行等待，直到其他线程完成特定操作并调用CountDownLatch的countDown()方法将计数器减少到0，等待的线程才会被唤醒并继续执行。\n\n总的来说，CyclicBarrier用于多个线程之间相互等待达到一个共同的屏障点，而CountDownLatch用于一个或多个线程等待其他线程完成某个操作。CyclicBarrier是多线程间的同步，而CountDownLatch是线程间的等待和通信。\n```\n\n## 控制并线程数的semaphore\n\n### 是什么？使用场景？\n\n```\nSemaphore（信号量）是Java中的一个同步工具类，用于控制同时访问某个资源的线程数量。\n\nSemaphore维护了一组许可（permits），线程在访问资源之前必须先获取许可，如果许可数大于0，则线程可以获取许可并继续执行；如果许可数等于0，则线程必须等待，直到有其他线程释放许可。\n```\n\n### 主要特点\n\n```\nSemaphore的主要特点包括：\n\n1.许可数量：Semaphore可以指定初始化时的许可数量，表示可以同时访问某个资源的线程数量。\n\n2.许可获取和释放：线程可以通过acquire()方法获取许可，如果许可数大于0，则线程可以继续执行；否则，线程会被阻塞等待。线程在使用完资源后，需要通过release()方法释放许可，以供其他线程使用。\n\n3.公平性：Semaphore可以选择是否使用公平的获取许可的策略。如果设置为公平模式，那么等待时间最长的线程将优先获得许可。\n```\n\n### 使用场景\n\n```\nSemaphore适用于控制对某个资源的并发访问数量，例如限制数据库连接数、限制线程池的线程数等场景。通过合理地控制许可数量，可以避免资源过度竞争和线程的过度并发，从而保证系统的稳定性和性能。\n```\n\n### 使用方式\n\n```java\npublic class SemaphoreTest {\n\n    private static final int       THREAD_COUNT = 30;\t\t// 线程数\n\n    private static ExecutorService threadPool   = Executors.newFixedThreadPool(THREAD_COUNT);\n\n    private static Semaphore       s            = new Semaphore(10);\t\t// 最大并发数\n\n    public static void main(String[] args) {\n        for (int i = 0; i < THREAD_COUNT; i++) {\n            threadPool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        s.acquire();\t// 获取许可证\n                        System.out.println(\"save data\");\n                        s.release();\t// 释放许可证\n                    } catch (InterruptedException e) {\n                    }\n                }\n            });\n        }\n\n        threadPool.shutdown();\n    }\n}\n\n```\n\n\n\n## 线程间交换数据的Exchanger\n\n### 是什么？\n\n```\nExchanger（交换器）是Java中的一个同步工具类，用于两个线程之间进行数据交换。\n\nExchanger提供一个点，两个线程可以通过该点交换数据。其中，一个线程会调用exchange()方法来等待另一个线程到达交换点，并将自己的数据传递给另一个线程。当两个线程都到达交换点时，它们会交换数据，并继续执行后续操作。\n```\n\n### 主要特点\n\n```\n1.数据交换：两个线程可以在交换点交换数据，通过exchange()方法来进行数据的发送和接收。\n\n2.线程同步：交换操作是同步的，即当一个线程调用exchange()方法时，如果另一个线程未到达交换点，则会阻塞等待，直到另一个线程到达交换点为止。\n\n3.数据一致性：通过Exchanger交换的数据可以保证在两个线程之间是一致的，即发送方线程传递的数据会被接收方线程接收到。\n```\n\n### 应用场景\n\n```\nExchanger适用于需要两个线程之间进行数据交换的场景，例如线程间的数据传递、协作计算等。通过Exchanger，可以实现线程之间的数据共享和协作，从而提高并发编程的灵活性和效率。\n```\n\n### 使用方式\n\n例子：将纸质银行流水通过人工方式录入成电子银行流水，为了避免错误，采用AB岗两人进行录入，录入到Excel后，系统需要加载这两个Excel，并对数据进行校对，看录入是否一致。\n\n```java\npublic class ExchangerTest {\n\n    private static final Exchanger<String> exgr       = new Exchanger<String>();\n\n    private static ExecutorService         threadPool = Executors.newFixedThreadPool(2);\n\n    public static void main(String[] args) {\n\n        threadPool.execute(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    String A = \"银行流水A\";// A录入银行流水数据\n                    exgr.exchange(A);\n                } catch (InterruptedException e) {\n                }\n            }\n        });\n\n        threadPool.execute(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    String B = \"银行流水B\";// B录入银行流水数据\n                    String A = exgr.exchange(\"B\");\n                    System.out.println(\"A和B数据是否一致：\" + A.equals(B) + \"，A录入的是：\" + A + \"，B录入是：\" + B);\n                } catch (InterruptedException e) {\n                }\n            }\n        });\n\n        threadPool.shutdown();\n\n    }\n}\n```\n\n","timestamp":1691670417385},{"name":"06-Java中的线程池.md","path":"001-JAVA/010-Java并发编程/06-Java中的线程池.md","content":"# Java中的线程池\n\n## 线程池概述\n\n### 是什么？\n\n```\nJava中的线程池是一种用于管理和复用线程的机制，它可以有效地管理线程的创建、销毁和复用，从而提高应用程序的性能和资源利用率。\n\nJava中的线程池是通过Executor框架来实现的，主要包括以下几个核心组件：\n1.Executor接口：\n\t定义了线程池的执行方法，用于提交任务。\n2.ExecutorService接口：\n\t继承自Executor接口，提供了更丰富的线程池操作方法，例如任务提交、任务执行状态管理、线程池的关闭等。\n2.ThreadPoolExecutor类：\n\t是Java中默认的线程池实现类，实现了ExecutorService接口。它提供了可配置的线程池，可以根据需要自定义线程池的核心线程数、最大线程数、线程空闲时间等参数。\n```\n\n### 优点\n\n```\n1.重用线程，降低资源消耗：线程池可以重用已创建的线程，避免了频繁创建和销毁线程的开销。\n2.控制并发度：线程池可以限制并发线程的数量，通过控制核心线程数、最大线程数和任务队列的大小来控制线程池的并发度，避免系统资源被过度占用。\n3.提高响应速度：线程池可以通过复用线程，减少线程的创建和销毁时间，从而提高任务的响应速度。\n4.统一管理：线程池可以统一管理线程的生命周期、状态和执行结果，方便任务的提交、取消和获取执行结果。\n```\n\n\n\n## 实现原理\n\n![image-20230513125820492](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/05/13/12582016839539001683953900698IOTwhM-image-20230513125820492.png)\n\n![image-20230513125913452](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/05/13/12591316839539531683953953567PnBFMg-image-20230513125913452.png)\n\n工作流程：\n```\n1 创建线程池时，线程池中线程数为0\n2 调用execute()添加一个请求任务时：\n\t2.1 当前运行线程数 < corePoolSize   ==> 创建新线程执行任务（执行这一步需要获取全局锁）\n\t2.2 当前运行线程数 >= corePoolSize  ==> 将任务加入BlockingQueue\n\t2.3 如果BlockingQueue已满 & 正在运行线程数 < maximumPoolSize\t ==> 创建非核心线程处理任务（执行这一步需要获取全局锁）\n\t2.4 如果BlockingQueue已满 & 正在运行线程数 >= maximumPoolSize  ==> 按照饱和拒绝策略执行\n3 当工作线程执行完任务后，会从队列中取出任务执行；如果没有待执行的任务，则线程进入空闲状态，等待新的任务分配。\n4 当一个线程空闲超过一定时间（keepAliveTime）：\n\t4.1 当前运行线程数 >= corePoolSize\t\t==> 停掉线程\n\t4.2 线程池的所有任务执行完成，会收缩到corePoolSize的大小\n```\n\n## 线程池的使用\n\n### 拒绝策略\n\n```\nCallerRunsPolicy: 使用调用者所在线程直接运行任务。一般并发比较小，性能要求不高，不允许失败。但是由于调用者自己运行任务，如果任务提交速度过快，可能导致程序阻塞，性能上损失较大。\nAbortPolicy（默认）: 丢弃任务，并抛出拒绝执行RejectedExecutionException异常信息。必须处理好抛出的异常，否则会打断当前执行流程，影响后续的任务执行\nDiscardPolicy: 直接丢弃。\nDiscardOldestPolicy: 丢弃阻塞队列中等待时间最久的任务，并加入新任务\n```\n\n### 线程池的创建\n\n```java\nnew ThreadPoolExecutor (\n    corePoolSize, \t\t// 线程池的核心线程数\n    maximumPoolSize,  // 能容纳的最大线程数\n    keepAliveTime, \t\t// 空闲线程存活时间\n    unit, \t\t\t\t\t\t// 存活的时间单位\n    workQueue, \t\t\t\t// 存放提交但未执行任务的队列\n    threadFactory, \t\t// 创建线程的工厂类\n    handler\t\t\t\t\t\t// 等待队列满后的拒绝策略\n  );\n```\n\n\n\n### 向线程池提交任务\n\n#### 方式一：execute()\n\n```java\n// 用于提交不需要返回值的任务，无法判断任务是否被线程池执行成功\nthreadsPool.execute(new Runnable() {\n  public void run() {\n    \n  }\n})\n```\n\n#### 方式二：submit()\n\n```java\n// 用于提交需要返回值的任务。\n// 线程池会返回一个future类型的对象，通过这个对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程知道任务完成; 通过get(long timeout, TimeUnit unit)方法则会阻塞当前线程一段时间后立即返回，这时候任务可能没有执行完。\nFuture(Object) future = executor.submit(harReturnValuetask);\ntry {\n\tObject s- future.get();\n} catch (InterruptedExeception e) {\n  // 处理中断异常\n} catch(ExecutionException e) {\n  // 处理无法执行任务异常\n} finally {\n  // 关闭线程池\n  executor.shutdown();\n}\n\n```\n\n### 关闭线程池\n\n```\n可以调用线程池的shutdown或shutdownNow方法来关闭线程池。\n\n原理：\n它们的原理都是遍历线程池中工作线程，逐个调用线程中的interrupt方法来中断，所以无法响应中断的任务可能永远无法停止。\n\n区别：\nshutdownNow先将线程池的状态设置为STOP，然后尝试停止所有正在执行或暂停任务的线程，并返回等待执行任务的列表。\nshutdown只是将线程池的状态设置为SHUTDOWN状态，然后中断所有没有正在执行任务的线程\n\n共同点：\n调用任意一个关闭方法，isShutdown方法就会返回true。\n当所有的任务都已经关闭后，才表示线程池关闭成功，调用isTerminaed方法会返回true。\n\n如何选择：\n通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以选择shutdownNow方法。\n```\n\n### 注意事项\n\n```\n1 项目中创建多线程时，使用常见的三种线程池创建方式，单一、可变、定长都 有一定问题，原因是 FixedThreadPool 和 SingleThreadExecutor 底层都是用 LinkedBlockingQueue 实现的，这个队列最大长度为 Integer.MAX_VALUE， 容易导致 OOM。所以实际生产一般自己通过 ThreadPoolExecutor 的 7 个参 数，自定义线程池\n创建线程池推荐适用 ThreadPoolExecutor 及其 7 个参数手动创建\n```\n\n3. 为什么不允许适用不允许 Executors.的方式手动创建线程池\n\n![image-20230514202727417](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/05/14/20272716840672471684067247591WgZgej-image-20230514202727417.png)\n\n### 入门案例\n\n```\n场景：火车站3个售票口，10个用户买票\n```\n\n```java\npackage ThreadPool;\n\nimport java.util.concurrent.*;\n\npublic class ThreadPoolDemo1 {\n\n    public static void main(String[] args) {\n        // 定义线程池，线程数量为3，模拟3个窗口\n        ExecutorService threadService = new ThreadPoolExecutor(\n                3,\n                3,\n                60L,\n                TimeUnit.SECONDS,\n                new LinkedBlockingQueue<>(),\n                Executors.defaultThreadFactory(),\n                new ThreadPoolExecutor.DiscardOldestPolicy()\n        );\n\n        // 10个人买票\n        try {\n            for(int i = 1; i <= 10; i++) {\n                threadService.execute(()->{\n                    try {\n                        System.out.println(Thread.currentThread().getName() + \"窗口，开始卖票\");\n                        Thread.sleep(5000);\n                        System.out.println(Thread.currentThread().getName() + \"窗口，买票结束\");\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            // 完成后结束\n            threadService.shutdown();\n        }\n    }\n}\n\n// 输出\npool-1-thread-1窗口，开始卖票\npool-1-thread-3窗口，开始卖票\npool-1-thread-2窗口，开始卖票\npool-1-thread-3窗口，买票结束\npool-1-thread-1窗口，买票结束\npool-1-thread-3窗口，开始卖票\npool-1-thread-1窗口，开始卖票\npool-1-thread-2窗口，买票结束\npool-1-thread-2窗口，开始卖票\npool-1-thread-3窗口，买票结束\npool-1-thread-3窗口，开始卖票\npool-1-thread-1窗口，买票结束\npool-1-thread-1窗口，开始卖票\npool-1-thread-2窗口，买票结束\npool-1-thread-2窗口，开始卖票\npool-1-thread-1窗口，买票结束\npool-1-thread-1窗口，开始卖票\npool-1-thread-2窗口，买票结束\npool-1-thread-3窗口，买票结束\npool-1-thread-1窗口，买票结束\n```\n\n","timestamp":1691670417385},{"name":"07-Executor框架.md","path":"001-JAVA/010-Java并发编程/07-Executor框架.md","content":"# Executor框架\n\n## 概述\n\n### 是什么？\n\n```\nExecutor 框架是 Java 并发编程中提供的一个高级工具，用于简化多线程编程中线程的管理和任务的执行。它提供了一组接口和类，用于创建和管理线程池，提交任务，执行任务，并处理任务的完成结果。\n```\n\n### 已经有了线程池，为什么还需要Executor？\n\n```\n我们知道线程池就是线程的集合，线程池集中管理线程，以实现线程的重用，降低资源消耗，提高响应速度等。线程用于执行异步任务，单个的线程既是工作单元也是执行机制，从JDK1.5开始，为了把工作单元与执行机制分离开，Executor框架诞生了，他是一个用于统一创建与运行的接口。Executor框架实现的就是线程池的功能。\n```\n\n## Executor框架的结构\n\n```\nExecutor框架包括3大部分：\n（1）任务。也就是工作单元，包括被执行任务需要实现的接口：Runnable接口或者Callable接口；\n（2）任务的执行。也就是把任务分派给多个线程的执行机制，包括Executor接口及继承自Executor接口的ExecutorService接口。\n（3）异步计算的结果。包括Future接口及实现了Future接口的FutureTask类。\n\n```\n\n### Executor框架的成员及其关系\n\n![Java并发——Executor框架详解_Java并发](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/05/14/22181516840738951684073895234TFvjIo-resize,m_fixed,w_1184-20230514221815144.jpg)\n\n### Executor框架的使用示意图\n\n![Java并发——Executor框架详解_线程池_02](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/05/14/22184616840739261684073926767ZzkXVL-resize,m_fixed,w_1184-20230514221846665.jpg)\n\n### 使用步骤\n\n1.**创建 Executor 实例**：\n\n根据需要选择合适的 Executor 实现类来创建 Executor 实例。常见的实现类有 `ThreadPoolExecutor`、`ScheduledThreadPoolExecutor` 等。可以使用它们的构造函数或者工厂方法来创建 Executor 实例。\n\n```java\n// 创建ThreadPoolExecutor示例。 ThreadPoolExecutor可以替换为其父类ExecutorService 或 Executor\nThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n    2,  // 核心线程数\n    5,  // 最大线程数\n    1,  // 空闲线程存活时间\n    TimeUnit.SECONDS,  // 时间单位\n    new LinkedBlockingQueue<>() // 任务队列\n);\n\n\n// 创建 ScheduledExecutorService 实例\nScheduledExecutorService executor = Executors.newScheduledThreadPool(2);\n```\n\n2.**创建任务**：创建待执行的任务，可以实现 `Runnable` 接口或 `Callable` 接口，具体根据业务需求来定义任务的逻辑。\n\n```java\n// Runnable 无返回值\npublic class MyRunnable implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(\"Hello\")\n    }\n}\n\n// Callable 有返回值\nclass callableTest implements Callable<String >{\n  \t@Override\n  \tpublic String call() {\n      return \"Hello\";\n   }\n}\n```\n\n3.**提交任务**：使用 Executor 实例的 `execute(Runnable)` 方法或 `submit(Callable)` 方法将任务提交给 Executor 执行。`execute` 方法适用于不需要获取任务执行结果的情况，而 `submit` 方法适用于需要获取任务执行结果的情况。\n\n```java\n// 提交Runnable任务\nexecutor.execute(runnaleTask);\n\n// 提交Callable任务\nexecutor.submit(callableTask);\n```\n\n4.**等待任务执行完成**（可选）：根据需要，可以使用 `Future` 对象来等待任务执行完成并获取任务的执行结果。`submit` 方法返回一个 `Future` 对象，可以使用它的 `get()` 方法来阻塞等待任务执行完成并获取结果。\n\n```java\n// 提交任务给 Executor 执行，并获取 Future 对象\nFuture<String> future = executor.submit(callableTask);\n\n// 等待任务执行完成并获取结果\ntry {\n    String result = future.get();\t\t// get会阻塞等人任务完成\n    System.out.println(\"Task Result: \" + result);\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n5.**关闭 Executor**：在不再需要执行新任务时，需要显式地关闭 Executor。可以调用 Executor 的 `shutdown()` 方法来平滑地关闭 Executor，它会等待所有已提交的任务执行完成后再关闭 Executor。也可以调用 `shutdownNow()` 方法来立即关闭 Executor，它会尝试中断正在执行的任务并返回尚未执行的任务列表。\n\n```java\n// 方式1\nexecutor.shutdown();\n\n// 方式2\nexecutor.shutdownNow();\n```\n\n### Executor框架成员\n\n<img src=\"https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/05/15/131438168412767816841276789411OIKxd-20180318215737261.jpeg\" alt=\"img\" style=\"zoom: 67%;\" />\n\n#### ThreadPoolExecutor\n\n##### FixedThreadPool\n\n作用 & 场景\n\n```\n创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这 些线程。在任意点，在大多数线程会处于处理任务的活动状态。如果在所有线 程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中 等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线 程将代替它执行后续的任务（如果需要）。在某个线程被显式地关闭之前，池 中的线程将一直存在。\n\n适用于可以预测线程数量的业务中，或者服务器负载较重，对线程数有严 格限制的场景\n```\n\n特点\n\n```\n特征：\n• 线程池中的线程处于一定的量，可以很好的控制线程的并发量\n• 线程可以重复被使用，在显示关闭之前，都将一直存在\n• 超出一定量的线程被提交时候需在队列中等待\n```\n\n创建方式\n\n```java\nExecutorService executor = Executors.newFixedThreadPool(nThreads);\n```\n\n源码\n\n```java\npublic static ExecutorService newFixedThreadPool() { \n    return new ThreadPoolExecutor(\n      10, \n      10, \n      0L, \n      TimeUnit.SECONDS, \n      new LinkedBlockingQueue<>(), \n      Executors.defaultThreadFactory(), \n      new ThreadPoolExecutor.AbortPolicy()\n    );\n}\n```\n\n##### SingleThreadExecutor\n\n作用 & 场景\n\n```\n创建一个使用单个worker线程的 Executor，以无界队列方式来运行该 线程。\n（注意，如果因为在关闭前的执行期间出现失败而终止了此单个线程， 那么如果需要，一个新线程将代替它执行后续的任务）。\n可保证顺序地执行各 个任务，并且在任意给定的时间不会有多个线程是活动的。\n与其他等效的 newFixedThreadPool 不同，可保证无需重新配置此方法所返回的执行程序即可使用其他的线程。\n\n适用于需要保证顺序执行各个任务，并且在任意时间点，不会同时有多个 线程的场景\n```\n\n特点\n\n```\n线程池中最多执行 1 个线程，之后提交的线程活动将会排在队列中以此 执行\n```\n\n创建方式\n\n```java\nExecutorService executor = Executors.newSingleThreadExecutor();\n```\n\n源码\n\n```java\npublic static ExecutorService newSingleThreadExecutor() { \n    return new ThreadPoolExecutor(\n        1, \n        1, \n        0L, \n        TimeUnit.SECONDS, \n        new LinkedBlockingQueue<>(), \n        Executors.defaultThreadFactory(), \n        new ThreadPoolExecutor.AbortPolicy()\n    );\n}\n```\n\n\n\n##### CachedThreadPool\n\n作用 & 场景\n\n```\n创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空 闲线程，若无可回收，则新建线程\n\n适用于创建一个可无限扩大的线程池，服务器负载压力较轻，执行时间较短，任务多的场景\n```\n\n特点\n\n```\n线程池中数量没有固定，可达到最大值（Interger. MAX_VALUE）\n线程池中的线程可进行缓存重复利用和回收（回收默认时间为 1 分钟）\n当线程池中，没有可用线程，会重新创建一个线程\n```\n\n创建方式\n\n```\nExecutorService executor = Executors.newCachedThreadPool();\n```\n\n源码\n\n```java\npublic static ExecutorService newCachedThreadPool(){ \n  return new ThreadPoolExecutor(\n    0, \n    Integer.MAX_VALUE, \n    60L, \n    TimeUnit.SECONDS, \n    new SynchronousQueue<>(), \n    Executors.defaultThreadFactory(), \n    new ThreadPoolExecutor.AbortPolicy()\n  );\n}\n```\n\n\n\n#### ScheduledThreadPoolExecutor\n\n##### ScheduledThreadPoolExecutor\n\n##### SingleThreadScheduledExecutor\n\n\n\n#### Future接口 & FutureTask类\n\n\n\n#### Runnable接口和Callable接口\n\n\n\n#### Executors工厂类\n\n```\n提供了常见配置线程池的方法，因为ThreadPoolExecutor的参数众多且意义重大，为了避免配置出错，才有了Executors工厂类。\n```\n\n","timestamp":1691670417385},{"name":"001-JUC.md","path":"001-JAVA/011-JUC/001-JUC.md","content":"# JUC高并发编程\n\n## 1 JUC概述\n\n## 2 LOCK接口\n\n### 什么是Lock接口\n\n```java\npublic interface Lock {\n    void lock(); \n    void lockInterruptibly() throws InterruptedException; \n    boolean tryLock(); \n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException; \n    void unlock(); Condition newCondition();\n}\n```\n\n```\nLock是Java中提供的一个接口，用于实现【线程同步机制】，它可以替代Synchronized关键字。\nLock接口提供了比Synchronized更灵活、更强大的线程同步功能，可以用于解决多线程中的资源竞争和死锁等问题。\nLock接口的实现类有很多种，其中最常用的是ReentrantLock。\n\nLock接口提供了以下主要方法：\n- lock()：获取锁，如果锁已经被其他线程获取，则当前线程进入等待状态。\n- unlock()：释放锁，如果当前线程持有锁，则释放锁并唤醒等待的线程。\n- tryLock()：尝试获取锁，如果锁没有被其他线程获取，则获取锁并返回true，否则立即返回false。\n- tryLock(long time, TimeUnit unit)：尝试获取锁，如果锁没有被其他线程获取，则获取锁并返回true，否则等待指定时间后返回false。\n- newCondition()：创建一个Condition对象，用于实现等待/通知机制。\n\n需要注意的是，在使用Lock接口时，需要在finally代码块中释放锁，以确保锁一定会被释放，避免死锁的发生。\n```\n\n#### 什么是线程同步机制？\n\n```\n- 是什么？\n线程同步机制是多线程编程中常用的一种机制，用于控制多个线程对共享资源的访问。\n\n- 为什么？\n在多线程环境中，多个线程同时访问共享资源可能会导致竞争条件和数据不一致等问题，因此需要使用线程同步机制来避免这些问题的发生\n\n- 怎么样？\n1.synchronized\n2.Lock接口\n\n- 基本原理\n线程同步机制的基本原理是在共享资源的访问前获取锁，只有获取锁的线程才能访问共享资源，其他线程需要等待锁的释放。\n在共享资源访问完成后，释放锁，让其他线程可以继续访问共享资源。这样就保证了共享资源在任何时刻只能被一个线程访问，避免了竞争条件和数据不一致等问题的发生。\n\n- 使用时注意的问题\n1.使用线程同步机制时，应该避免死锁、饥饿等问题的发生，以确保程序的正常运行\n2.同时，在使用synchronized关键字时，应该尽量减小同步块的范围，以提高程序的性能。\n3.在使用Lock接口时，需要在finally代码块中释放锁，以确保锁一定会被释放，避免死锁的发生。\n```\n\n##### 在使用synchronized关键字时，为什么要减小同步块的范围？\n\n```\n1.提高性能\n范围越大，需要等待获取锁的线程越多，导致在获取锁的过程中需要等待其他线程释放锁，而其他线程释放锁的时间也会比较长，这就会造成线程的等待时间过长，降低程序的运行效率。\n2.避免死锁\n不同的线程可能会竞争多个锁，释放锁的时间也会比较长，导致相互等待，形成死锁。\n\n因此，为了避免以上问题的发生，应该尽量减小同步块的范围，只在必要的地方进行同步，这样可以提高程序的性能，同时也可以降低出现死锁等问题的概率。\n```\n\n##### 为什么使用lock接口需要在finally代码块中释放锁\n\n```\n- 为什么？\n在使用Lock接口进行线程同步时，需要手动获取和释放锁，这是两个独立的操作，如果在获取锁之后发生异常，就有可能导致锁没有被释放，从而导致死锁等问题的发生。\n- 怎么样？\n因此，将释放锁的操作放在finally代码块中，这样可以确保在任何情况下都会释放锁，避免死锁等问题的发生。\n```\n\n### Lock和Synchronized的区别？\n\n```\n- 是什么 & 作用\nLock和Synchronized都是Java中用于实现线程同步的机制，它们的目的是为了避免线程间的竞争条件和数据不一致等问题。它们的区别如下：\n\n- 区别\n1.锁的获取方式：\n\tSynchronized是在进入同步代码块或同步方法时，自动获取锁，退出同步代码块或方法时自动释放锁；而Lock需要手动获取锁，并且必须手动释放锁。\n2.锁的粒度：\n\tSynchronized只能对整个方法或代码块进行加锁，而Lock可以对代码块进行更细粒度的控制。\n3.可中断性：\n\t在获取锁时，Synchronized是不可中断的，即使该线程在等待锁的过程中被中断，也不会释放锁；而Lock可以根据需要设置锁的可中断性。\n4.公平锁：\n\tSynchronized是非公平锁，不保证等待时间最长的线程最先获取锁；而Lock可以通过参数指定为公平锁或非公平锁。\n5.性能：\n\t相比较而言，Lock的性能比Synchronized好，在高并发的情况下，Lock的吞吐量比Synchronized更高。\n\n需要注意的是，Lock是在JDK 5中引入的，而Synchronized是Java早期就提供的同步机制。由于Lock相比Synchronized更灵活和高效，因此在实际开发中，使用Lock的场景会更多。\n```\n\n### Synchronized实现卖票例子\n\n```java\npackage com.atguigu.sync;\n\n//第一步  创建资源类，定义属性和和操作方法\nclass Ticket {\n    //票数\n    private int number = 10;\n    //操作方法：卖票\n    public synchronized void sale() {\n        //判断：是否有票\n        if(number > 0) {\n            System.out.println(Thread.currentThread().getName()+\" : 卖出：\"+(number--)+\" 剩下：\"+number);\n        }\n    }\n}\n\npublic class SaleTicket {\n    //第二步 创建多个线程，调用资源类的操作方法\n    public static void main(String[] args) {\n        //创建Ticket对象\n        Ticket ticket = new Ticket();\n        //创建三个线程\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //调用卖票方法\n                for (int i = 0; i < 40; i++) {\n                    ticket.sale();\n                }\n            }\n        },\"AA\").start();\n\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //调用卖票方法\n                for (int i = 0; i < 40; i++) {\n                    ticket.sale();\n                }\n            }\n        },\"BB\").start();\n\n        // lambda表达式写法\n        new Thread(() -> {\n            //调用卖票方法\n            for (int i = 0; i < 40; i++) {\n                ticket.sale();\n            }\n        },\"CC\").start();\n    }\n}\n\n// 输出\nAA : 卖出：30 剩下：29\n...\nAA : 卖出：7 剩下：6\nBB : 卖出：6 剩下：5\n...\nBB : 卖出：1 剩下：0\n```\n\n### Lock实现卖票例子\n\n```java\n\n//第一步  创建资源类，定义属性和和操作方法\nclass LTicket {\n    //票数量\n    private int number = 30;\n\n    //创建可重入锁\n    private final ReentrantLock lock = new ReentrantLock(true);\n    //卖票方法\n    public void sale() {\n        //上锁\n        lock.lock();\n        try {\n            //判断是否有票\n            if(number > 0) {\n                System.out.println(Thread.currentThread().getName()+\" ：卖出\"+(number--)+\" 剩余：\"+number);\n            }\n        } finally {\n            //解锁\n            lock.unlock();\n        }\n    }\n}\n\npublic class LSaleTicket {\n    //第二步 创建多个线程，调用资源类的操作方法\n    //创建三个线程\n    public static void main(String[] args) {\n\n        LTicket ticket = new LTicket();\n\n        new Thread(()-> {\n            for (int i = 0; i < 40; i++) {\n                ticket.sale();\n            }\n        },\"AA\").start();\n\n        new Thread(()-> {\n            for (int i = 0; i < 40; i++) {\n                ticket.sale();\n            }\n        },\"BB\").start();\n\n        new Thread(()-> {\n            for (int i = 0; i < 40; i++) {\n                ticket.sale();\n            }\n        },\"CC\").start();\n    }\n}\n\n```\n\n\n\n### 什么是可重入锁\n\n```\n- 是什么？\n可重入锁是指同一个线程在持有某个锁的情况下，可以继续获取该锁而不会出现死锁的情况\n\n- synchronized关键字实现原理\n每个对象都有一个监视器锁（monitor），线程进入同步块时获取该对象的监视器锁，并在同步块结束时释放该锁，当一个线程在持有该锁的情况下再次进入同步块时，会自动获取该锁，而不会被阻塞。\n\n- ReentrantLock重入锁实现原理\n它使用一个计数器来记录线程获取锁的次数。当一个线程第一次获取锁时，计数器的值为1，当同一个线程再次获取锁时，计数器的值会递增，当线程退出同步块时，计数器的值递减，直到计数器的值为0时，锁被释放。这种机制保证了线程可以多次获取同一个锁而不会出现死锁的情况。\n```\n\n### 什么是ReentrantLock & 特点\n\n```\n- 是什么？\nReentrantLock是Java中实现Lock接口的一个类，它提供了与synchronized关键字类似的线程同步机制\n\n- 特点\n1.可重入性：\n\t与synchronized关键字一样，ReentrantLock支持可重入锁，即同一个线程可以多次获取同一个锁而不会死锁\n2.公平锁与非公平锁：\n\tReentrantLock提供了两种锁的实现方式，即公平锁和非公平锁。公平锁会按照线程的请求顺序来分配锁，而非公平锁则允许线程在竞争时插队，可能会导致某些线程长时间等待。\n3.条件变量：\n\tReentrantLock提供了Condition接口的实现类Condition，它可以将一个锁分为多个条件，使得线程可以在指定条件下等待和唤醒。这使得线程间的通信变得更加灵活。\n3.可中断性：\n\t与synchronized关键字不同，ReentrantLock提供了可中断锁的机制。即当一个线程等待获取锁时，可以通过中断等待的线程来结束等待。\n\nReentrantLock相对于synchronized关键字来说，具有更强的灵活性和可定制性，但需要手动获取和释放锁，使用时也需要注意避免死锁、饥饿等问题的发生。\n```\n\n### ReentrantLock和synchronized例子\n\n```java\n// 可重入锁\npublic class SyncLockDemo {\n\n    public synchronized void add() {\n        add();\n    }\n\n    public static void main(String[] args) {\n        //Lock演示可重入锁\n        Lock lock = new ReentrantLock();\n        //创建线程\n        new Thread(()->{\n            try {\n                //上锁\n                lock.lock();\n                System.out.println(Thread.currentThread().getName()+\" 外层\");\n\n                try {\n                    //上锁\n                    lock.lock();\n                    System.out.println(Thread.currentThread().getName()+\" 内层\");\n                }finally {\n                    //释放锁\n                    lock.unlock();\n                }\n            }finally {\n                //释放做\n                lock.unlock();\n            }\n        },\"t1\").start();\n\n        //创建新线程\n        new Thread(()->{\n            lock.lock();\n            System.out.println(\"aaaa\");\n            lock.unlock();\n        },\"aa\").start();\n\n       // new SyncLockDemo().add();\n       // synchronized\n       Object o = new Object();\n       new Thread(()->{\n           synchronized(o) {\n               System.out.println(Thread.currentThread().getName()+\" 外层\");\n\n               synchronized (o) {\n                   System.out.println(Thread.currentThread().getName()+\" 中层\");\n\n                   synchronized (o) {\n                       System.out.println(Thread.currentThread().getName()+\" 内层\");\n                   }\n               }\n           }\n\n       },\"t1\").start();\n    }\n}\n\n// 输出\nt1 外层\nt1 内层\naaaa\nt1 外层\nt1 中层\nt1 内层\n```\n\n### 创建线程的多种方式\n\n```\n1.继承Tread类\n2.实现Runnable接口\n3.实现Callable接口\n4.使用线程池\n```\n\n#### 继承Tread类\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread();\n        t.start(); // 启动新线程\n    }\n}\n```\n\n执行指定代码\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new MyThread();\n        t.start(); // 启动新线程\n    }\n}\n\nclass MyThread extends Thread {\n    @Override\n    public void run() {\n        System.out.println(\"start new thread!\");\n    }\n}\n```\n\n[参考](https://www.liaoxuefeng.com/wiki/1252599548343744/1306580710588449)\n\n#### 实现Runnable接口\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(new MyRunnable());\n        t.start(); // 启动新线程\n    }\n}\n\nclass MyRunnable implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(\"start new thread!\");\n    }\n}\n```\n简写\n```java\nnew Thread(new Runnable() {\n  \t@Override\n  \tpublic void run() {\n    \t//调用卖票方法\n    \tfor (int i = 0; i < 40; i++) {\n      \tticket.sale();\n    \t}\n  \t}\n},\"Thread Name\").start();\n```\n\n使用Java8的lambda语法简写\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(() -> {\n            System.out.println(\"start new thread!\");\n        });\n        t.start(); // 启动新线程\n    }\n}\n```\n\n[参考](https://www.liaoxuefeng.com/wiki/1252599548343744/1306580710588449)\n\n## \n\n\n\n## 3 线程间通信\n\n线程间通信的模型有两种：共享内存和消息传递\n\n**线程间的通信具体步骤：**\n\n1.  创建资源类，在资源类中创建属性和操作方法\n\n2.  在资源类操作方法：判断、操作、通知\n\n3.  创建多个线程，调用资源类的操作方法\n\n4.  防止虚拟唤醒问题\n\n    \n\n**案例**\n\n假设有两个线程，该线程在执行过程中，判断值（不是该值等待，让其他线程抢），操作值，通知另外一个线程的调度\n\n通过使用两个线程对0这个值操作，一个线程加1，一个线程减1，交替实现多次\n\n#### synchronized实现\n\n```java\n//第一步 创建资源类，定义属性和操作方法\nclass Share {\n    //初始值\n    private int number = 0;\n    //+1的方法\n    public synchronized void incr() throws InterruptedException {\n        //第二步 判断 干活 通知\n       // 错误写法：\n       // if(number != 0) { //判断number值是否是0，如果不是0，等待\t\t注意：此处写法会导致虚假换新问题，用while\n            // this.wait(); //在哪里睡，就在哪里醒\n        // }\n      \n        // 正确写法\n      \twhile(number != 0) { //判断number值是否是0，如果不是0，等待\n            this.wait(); //在哪里睡，就在哪里醒\n        }\n        //如果number值是0，就+1操作\n        number++;\n        System.out.println(Thread.currentThread().getName()+\" :: \"+number);\n        //通知其他线程\n        this.notifyAll();\n    }\n\n    //-1的方法\n    public synchronized void decr() throws InterruptedException {\n        //判断\n        if(number != 1) {\n            this.wait();\n        }\n        //干活\n        number--;\n        System.out.println(Thread.currentThread().getName()+\" :: \"+number);\n        //通知其他线程\n        this.notifyAll();\n    }\n}\n\npublic class ThreadDemo1 {\n    //第三步 创建多个线程，调用资源类的操作方法\n    public static void main(String[] args) {\n        Share share = new Share();\n        //创建线程\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.incr(); //+1\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"AA\").start();\n\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.decr(); //-1\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"BB\").start();\n    }\n}\n\n// 结果\nAA :: 1\nBB :: 0\nAA :: 1\nBB :: 0\n...\n```\n\n问题：线程数多了之后，使用if来判断标志位会出现虚假唤醒问题\n\n```java\n// 在上述代码的基础上再添加线程\nnew Thread(()->{\n    for (int i = 1; i <=10; i++) {\n        try {\n            share.incr(); //+1\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n},\"CC\").start();\n\nnew Thread(()->{\n    for (int i = 1; i <=10; i++) {\n        try {\n            share.decr(); //-1\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n},\"DD\").start();\n\n// 结果\nAA :: 1\nBB :: 0\nAA :: 1\nBB :: 0\n...\nCC :: 1\nBB :: 0\nCC :: 1\nBB :: 0\nDD :: -1\n```\n\n主要是虚拟唤醒导致：如果一个线程执行完毕后，通知其他线程，该线程又进入等待睡眠，可能会因为某些原因被唤醒后，if结构的语句就不会判断了，一直往下执行，所以需要将if换成while结构，每次都判断。因为wait在哪里睡眠就在哪里被唤醒，结果被某个异常唤醒了后回不去了，if结构不会在判断了，需要更改为while\n\n```java\nwhile(number != 0) { //判断number值是否是0，如果不是0，等待\n    this.wait(); //在哪里睡，就在哪里醒\n}\n```\n\n#### lock实现\n\n```java\npackage com.atguigu.lock;\n\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n//第一步 创建资源类，定义属性和操作方法\nclass Share {\n    private int number = 0;\n\n    //创建Lock\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    //+1\n    public void incr() throws InterruptedException {\n        //上锁\n        lock.lock();\n        try {\n            //判断\n            while (number != 0) {\n                condition.await();\n            }\n            //干活\n            number++;\n            System.out.println(Thread.currentThread().getName()+\" :: \"+number);\n            //通知\n            condition.signalAll();\n        }finally {\n            //解锁\n            lock.unlock();\n        }\n    }\n\n    //-1\n    public void decr() throws InterruptedException {\n        lock.lock();\n        try {\n            while(number != 1) {\n                condition.await();\n            }\n            number--;\n            System.out.println(Thread.currentThread().getName()+\" :: \"+number);\n            condition.signalAll();\n        }finally {\n            lock.unlock();\n        }\n    }\n}\n\npublic class ThreadDemo2 {\n\n    public static void main(String[] args) {\n        Share share = new Share();\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.incr();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"AA\").start();\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.decr();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"BB\").start();\n\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.incr();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"CC\").start();\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    share.decr();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"DD\").start();\n    }\n\n}\n\n```\n\n\n\n## 4 线程间定制化通信\n\n**所谓定制化通信，需要让线程进行一定的顺序操作**\n\n**案列**：启动三个线程，按照如下要求：\nAA打印5此，BB打印10次，CC打印15次，一共进行10轮\n\n**具体思路**：\n每个线程添加一个标志位，是该标志位则执行操作，并且修改为下一个标志位，通知下一个标志位的线程\n\n```java\n//第一步 创建资源类\nclass ShareResource {\n    //定义标志位\n    private int flag = 1;  // 1 AA     2 BB     3 CC\n\n    //创建Lock锁\n    private Lock lock = new ReentrantLock();\n\n    //创建三个condition\n    private Condition c1 = lock.newCondition();\n    private Condition c2 = lock.newCondition();\n    private Condition c3 = lock.newCondition();\n\n    //打印5次，参数第几轮\n    public void print5(int loop) throws InterruptedException {\n        //上锁\n        lock.lock();\n        try {\n            //判断\n            while(flag != 1) {\n                //等待\n                c1.await();\n            }\n            //干活\n            for (int i = 1; i <=5; i++) {\n                System.out.println(Thread.currentThread().getName()+\" :: \"+i+\" ：轮数：\"+loop);\n            }\n            //通知\n            flag = 2; //修改标志位 2\n            c2.signal(); //通知BB线程\n        }finally {\n            //释放锁\n            lock.unlock();\n        }\n    }\n\n    //打印10次，参数第几轮\n    public void print10(int loop) throws InterruptedException {\n        lock.lock();\n        try {\n            while(flag != 2) {\n                c2.await();\n            }\n            for (int i = 1; i <=10; i++) {\n                System.out.println(Thread.currentThread().getName()+\" :: \"+i+\" ：轮数：\"+loop);\n            }\n            //修改标志位\n            flag = 3;\n            //通知CC线程\n            c3.signal();\n        }finally {\n            lock.unlock();\n        }\n    }\n\n    //打印15次，参数第几轮\n    public void print15(int loop) throws InterruptedException {\n        lock.lock();\n        try {\n            while(flag != 3) {\n                c3.await();\n            }\n            for (int i = 1; i <=15; i++) {\n                System.out.println(Thread.currentThread().getName()+\" :: \"+i+\" ：轮数：\"+loop);\n            }\n            //修改标志位\n            flag = 1;\n            //通知AA线程\n            c1.signal();\n        }finally {\n            lock.unlock();\n        }\n    }\n}\n\npublic class ThreadDemo3 {\n    public static void main(String[] args) {\n        ShareResource shareResource = new ShareResource();\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    shareResource.print5(i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"AA\").start();\n\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    shareResource.print10(i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"BB\").start();\n\n        new Thread(()->{\n            for (int i = 1; i <=10; i++) {\n                try {\n                    shareResource.print15(i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"CC\").start();\n    }\n}\n\n```\n\n\n\n## 5 集合的线程安全\n\n向集合中边读边写，导致java.util.ConcurrentModificationException异常\n\n```java\nList<String> list = new ArrayList<>();\n\nfor (int i = 0; i <30; i++) {\n    new Thread(()->{\n        //向集合添加内容\n       list.add(UUID.randomUUID().toString().substring(0,8));\n        //从集合获取内容\n        System.out.println(list);\n    },String.valueOf(i)).start();\n}\n\n```\n\n原因\n\n```\nboolean add(E e); \t没有synchronized声明，是线程非安全的\n```\n\n### 如何解决 ArrayList 类型的线程安全问题?\n\n#### 方法一：Vector\n\n#### 方法二：Collections\n\nCollections类中的很多方法都是static静态\n其中有一个方法是返回指定列表支持的同步（线程安全的）列表为`synchronizedList(List <T> list)`\n\n```java\nList<String> list = Collections.synchronizedList(new ArrayList<>());\n```\n\n\n\n#### 方法三：CopyOnWriteArrayList\n\n##### 实现\n\n```java\npublic class NotSafeDemo {\n\n/** 多个线程同时对集合进行修改 **/ \n  public static void main(String[] args) { \n    List list = new CopyOnWriteArrayList();\n    for (int i = 0; i < 100; i++) { \n      new Thread(() ->{ \n        list.add(UUID.randomUUID().toString()); \n        System.out.println(list); \n      }, \"线程\" + i).start(); \n    }\n\t}\n}\n```\n\n##### CopyOnWriteArrayList为什么能解决线程安全问题\n\n```\n实现原理：写时复制技术\n- 写过程：\n当需要对CopyOnWriteArrayList进行修改时，它会先将原始数组进行复制，然后再进行修改操作，最后将修改后的数组替换原始数组，这样就保证了修改操作的线程安全性。\n\n- 读过程\n在读取CopyOnWriteArrayList中的元素时，不需要加锁，因为读取时不会对原始数组进行修改，而是返回一个快照副本，多个线程同时进行读操作时不会出现线程安全问题。\n```\n\n##### CopyOnWriteArrayList缺点 & 适用场景\n\n```\n底层实现采用了复制数组的方式来保证线程安全，因此每次修改操作都需要对原始数组进行复制，这会带来一定的性能开销。\n【适用】于【读多写少】的场景，在需要高并发读取的场景中表现较好。\n【不适用】于【实时性】的场景，不能保证数据的实时一致性\n```\n\n\n\n### 如何解决 HashSet 类型的线程安全问题?\n\n#### 方法：CopyOnWriteArraySet\n\n```java\njava Set<String> set = new HashSet<>();\t\t\t\t\t  // 非安全\nSet<String> set = new CopyOnWriteArraySet<>();\t\t// 安全\n```\n\n\n\n### 如何解决 HashMap 类型的线程安全问题?\n\n```java\nMap<String,String> map = new HashMap<>();\t\t\t\t\t\t\t// 非安全\nMap<String,String> map = new ConcurrentHashMap<>();\t\t// 安全\n```\n\n#### TODO： ConcurrentHashMap实现原理\n\n\n\n\n\n## 6 多线程锁\n\n### 公平锁和非公平锁\n\n-   **公平锁**：效率相对低\n-   **非公平锁**：效率高，但是线程容易饿死\n\n实现\n\n```java\n// 公平锁\nReentrantLock lock = new ReentrantLock(true);\n// 非公平锁\nReentrantLock lock = new ReentrantLock(false);\n```\n\n\n\n### 可重入锁\n\nsynchronized和lock都是可重入锁\n\n-   sychronized是隐式锁，不用手工上锁与解锁，而lock为显示锁，需要手工上锁与解锁\n-   可重入锁也叫递归锁\n\n而且有了可重入锁之后，破解第一把之后就可以一直进入到内层结构\n\n\n\n### 死锁\n\n**产生死锁的原因：**\n\n1.  系统资源不足\n2.  系统资源分配不当\n3.  进程运行顺序不当\n\n\n\n## Callable接口\n\n### 有Runnable为什么还要callable？\n\n```\nRunnable 缺少的一项功能是，当线程终止时（即 run（）完成时），我们无法使线程返回结果。为了支持此功能，Java 中提供了 Callable 接口\n```\n\n\n\n### **比较Runnable接口和Callable接口**\n\n```java\n//实现Runnable接口\nclass MyThread1 implements Runnable {\n    @Override\n    public void run() {\n\n    }\n}\n\n//实现Callable接口\nclass MyThread2 implements Callable {\n\n    @Override\n    public Integer call() throws Exception {\n        return 200;\n    }\n}\n\n```\n\n","timestamp":1691670417385}]