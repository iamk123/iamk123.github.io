if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m005']=[{"name":"01-MINIO文件管理.md","path":"005-项目/001-民用航空发动机健康管理系统/01-系统功能/01-MINIO文件管理.md","content":"## MINIO文件管理\n\n### 数据库设计\n\n```java\n分片上传-分片任务记录表 sys_upload_task\nid \nupload_id\t\t\t\t\t\t\t// 分片上传的uploadId，需要根据该id来生成每个分片上传的地址\nfile_identifier\t\t\t\t// 文件唯一标识（md5）\nfile_name\t\t\t\t\t\t\t// 文件名\nbucket_name\t\t\t\t\t\t// 所属桶名\nobject_key\t\t\t\t\t\t// 文件的key\ntotal_size\t\t\t\t\t\t// 文件大小（byte）\nchunk_size\t\t\t\t\t\t// 每个分片大小（byte）\nchunk_num\t\t\t\t\t\t\t// 分片数量\n```\n\n### 功能\n\n#### 文件秒传\n\n```\n上传文件时会去计算文件的md5、文件大小、分片大小，将这些信息存储到数据库，再次上传时，根据md5值就能知道文件是否上传，如果存在文件，则直接返回文件的uri\n```\n\n#### 分片上传\n\n```\n将大文件拆分成小文件，将小文件上传\\下载，最后再将小文件组装成大文件\n```\n\n<img src=\"https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/08/03/20055016910643501691064350082DqOU1Q-640.png\" alt=\"图片\" style=\"zoom:50%;\" />\n\n```\n流程：\n（1）前端计算文件的md5值、文件大小、分片大小、文件名，调用文件上传接口\n（2）根据md5值查询是否上传过，\n\t\t\t- 如果上传完成则直接返回；【文件秒传】\n\t\t\t- 如果有上传过但为上传完成，则返回已经上传的分片；【断点续传的内容】\n\t\t\t- 如果未上传，则调用minio接口开启一个上传任务获取uploadId，将文件上传信息插入上传记录表中\n（3）根据md5去获取每个分片上传的地址【通过md5去查uploadId，根据uploadId和分片号查询上传地址】\n（4）异步将每个分片上传到指定地址\n（5）合并分片完成上传【监听进度，最后一个分片上传完就调合并接口】\n```\n\n#### 断点续传\n\n```\n指在传输过程中发生中断，或者传输失败，可以从断点处继续传输，而不需要从头开始传输整个文件\n```\n\n#### 分段下载\n\n```\n断点续传下载将需要下载的文件分成若干个分片分别下载，所有分片都下载完成后，将所有分片合并成完整的文件。\n```\n\n<img src=\"https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/08/04/213943169115638316911563833938akdFF-image-20220724211002451.png\" alt=\"image-20220724211002451\" style=\"zoom:50%;\" />\n\n```java\nGetObjectResponse stream = minioClient.getObject(\n  GetObjectArgs.builder()\n  .bucket(statObjectResponse.bucket())\n  .object(statObjectResponse.object())\n  .offset(startByte)\n  .length(contentLength)\n  .build()\n); \n```\n\n参考\n\n-   [minio断点下载](https://java.isture.com/arch/minio/minio-breakpoint-downloading.html#_3-%E6%96%AD%E7%82%B9%E4%B8%8B%E8%BD%BD)\n-   [springboot使用minio实现分段下载](https://www.bilibili.com/read/cv21016230/)\n\n\n\n#### 文件预览\n\n```\nopenoffice\n```\n\n\n\n### 问题\n\n#### 文件上传一半不上传了，怎么清理碎片分片？\n\n```\n（1）定时任务：可以考虑在sys_upload_task表中新加一个status字段，表示是否合并分片，默认为false，merge请求结束后变更为true，通过一个定时任务定期清理为status为false的记录。\n（2）另外MinIO自身对于临时上传的分片，会实施定时清理\n```\n\n#### 如何知道哪些分片已经上传成功？\n\n```\n（1）方式1: 通过redis记录，md5:uploadId  -> 分片号\n（2）方式2：直接调minio接口，获取已经上传的分片\n```\n\n#### 多个用户上传同一个文件怎么处理？\n\n```\n（1）文件上传锁：可以引入文件上传锁，确保同一时刻只有一个用户可以进行上传操作。当一个用户开始上传文件时，其他用户需要等待上传锁释放后才能开始上传。\n（2）版本控制：可以为每个文件引入版本控制，确保每个上传的文件都有唯一的版本号。用户上传同名文件时，系统会自动为其分配一个新的版本号，以保证数据的唯一性。\n```\n\n#### 优化：多用户上传同一个文件","timestamp":1692285118436},{"name":"02-相关问题.md","path":"005-项目/001-民用航空发动机健康管理系统/01-系统功能/02-相关问题.md","content":"## 基本概念\n\n### 数据源\n\n```\n是什么？\n数据的来源，mysql、hbase、mongodb、minio桶\n\n为什么？\n数据采集时，和数据处理时需要从指定数据源中获取数据进行分析、存储或其他操作。\n```\n\n### 数据集模型\n\n```\n\n```\n\n### 数据集\n\n```\n\n```\n\n### 实体模型\n\n```\n\n```\n\n### 实体\n\n```\n\n```\n\n### 任务节点\n\n```\n标题、执行类型、算法分组、算法名称、处理节点\n```\n\n### 事件类节点\n\n```\n（1）定时事件：\n（2）周期事件：\n```\n\n### 逻辑类节点\n\n```\n（1）IF节点\n（2）分支节点\n（3）合并节点\n```\n\n### 连线&线上条件\n\n```\n\n```\n\n### 解析器\n\n```\n作用：\n前端绘制完后返回一个json数据，接\n```\n\n\n\nmqtt\n\n```\nMQTT（Message Queuing Telemetry Transport，消 是一种基于发布/订阅（publish/subscribe）模式的“轻量级”通讯协议。最 大优点在于，用极少的代码和有限的带宽，为连接远程设备提供实时可 靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在 物联网、小型设备、移动应用等方面有较广泛的应用。\n```\n\nkafka\n\n```\nKafka 是一种高吞吐量的分布式发布订阅消息系统，优势包括：（1）高 吞吐量、低延迟：每秒可以处理几十万条消息，它的延迟最低只有几毫 秒；（2）可扩展性：集群支持热扩展；（3）持久性、可靠性：消息被 持久化到本地磁盘，并且支持数据备份防止数据丢失；（4）容错性：允 许集群中节点故障（若副本数量为 n，允许 n-1 个节点故障）；（5）高 并发：支持数千个客户端同时读写。\n```\n\nminio\n\n```\nMinIO 是一个用 Golang 开发的基于 Apache License v2.0 开源协议的对象 存储服务。它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非 结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜 像等，而一个对象文件可以是任意大小，从几 kb 到最大 5T 不等。MinIO 使用纠删码 erasure code 和校验和 checksum 来保护数据免受硬件故障和 数据损坏，即便丢失一半数量（N/2）的硬盘，仍可以恢复数据。\n```\n\nhbase\n\n```\nHBase 是基于 Apache Hadoop 的面向列的 NoSQL 数据库，是 Google 的 BigTable 的开源实现。 HBase 是一个针对半结构化数据的开源的、 多版本的、可伸缩的、高可靠的、高性能的、分布式的和面向列的动态 模式数据库。支持存储并处理大型的数据，是仅用普通的硬件配置，就 能够处理上千亿的行和几百万的列所组成的超大型数据库。HBase 是可 以提供实时计算（占用大量的内存）的分布式数据库， 数据被保存在 HDFS 上，由 HDFS 保证其高容错性。\n```\n\n","timestamp":1692285118436},{"name":"03-设计图.md","path":"005-项目/001-民用航空发动机健康管理系统/01-系统功能/03-设计图.md","content":"软件逻辑架构图\n\n![image-20230817231059358](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/08/17/23105916922850591692285059511P1Gvac-image-20230817231059358.png)\n\n物理结构图\n\n![image-20230817231132354](https://cdn.jsdelivr.net/gh/iamk123/typora@main/uPic/2023/08/17/231132169228509216922850924542RaPbD-image-20230817231132354.png)","timestamp":1692285118436}]